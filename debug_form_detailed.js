const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');

console.log('üîç Analizando configuraci√≥n del servidor para req.body vac√≠o...\n');

// Verificar configuraci√≥n de body parser en app.js
const appPath = path.join(__dirname, 'app.js');
const fs = require('fs');

try {
    const appContent = fs.readFileSync(appPath, 'utf8');
    
    console.log('üìã Verificando configuraci√≥n de body parser en app.js:');
    
    // Buscar configuraciones de body parser
    const bodyParserConfigs = [
        'app.use(express.json())',
        'app.use(express.urlencoded(',
        'app.use(bodyParser.',
        'express.json',
        'express.urlencoded',
        'bodyParser'
    ];
    
    let foundConfigs = [];
    bodyParserConfigs.forEach(config => {
        if (appContent.includes(config)) {
            foundConfigs.push(config);
        }
    });
    
    if (foundConfigs.length > 0) {
        console.log('‚úÖ Configuraciones encontradas:');
        foundConfigs.forEach(config => console.log(`   - ${config}`));
    } else {
        console.log('‚ùå No se encontraron configuraciones de body parser');
    }
    
    // Buscar l√≠neas espec√≠ficas de configuraci√≥n
    const lines = appContent.split('\n');
    lines.forEach((line, index) => {
        if (line.includes('express.json') || line.includes('express.urlencoded') || line.includes('bodyParser')) {
            console.log(`üìç L√≠nea ${index + 1}: ${line.trim()}`);
        }
    });
    
} catch (error) {
    console.error('‚ùå Error leyendo app.js:', error.message);
}

console.log('\nüîç Verificando el formulario task-create.ejs...');

try {
    const formPath = path.join(__dirname, 'src', 'views', 'admin', 'task-create.ejs');
    const formContent = fs.readFileSync(formPath, 'utf8');
    
    // Buscar el tag form
    const formMatch = formContent.match(/<form[^>]*>/i);
    if (formMatch) {
        console.log('‚úÖ Tag form encontrado:');
        console.log(`   ${formMatch[0]}`);
        
        // Verificar atributos importantes
        const formTag = formMatch[0];
        
        if (formTag.includes('method=')) {
            const methodMatch = formTag.match(/method=["']([^"']+)["']/i);
            console.log(`üìç M√©todo: ${methodMatch ? methodMatch[1] : 'No encontrado'}`);
        } else {
            console.log('‚ö†Ô∏è  M√©todo no especificado (default GET)');
        }
        
        if (formTag.includes('action=')) {
            const actionMatch = formTag.match(/action=["']([^"']+)["']/i);
            console.log(`üìç Action: ${actionMatch ? actionMatch[1] : 'No encontrado'}`);
        } else {
            console.log('‚ö†Ô∏è  Action no especificado');
        }
        
        if (formTag.includes('enctype=')) {
            const enctypeMatch = formTag.match(/enctype=["']([^"']+)["']/i);
            console.log(`üìç Enctype: ${enctypeMatch ? enctypeMatch[1] : 'No encontrado'}`);
        } else {
            console.log('üìç Enctype: application/x-www-form-urlencoded (default)');
        }
        
    } else {
        console.log('‚ùå No se encontr√≥ el tag form');
    }
    
    // Buscar campos input importantes
    console.log('\nüîç Verificando campos del formulario:');
    
    const importantFields = ['titulo', 'descripcion', 'prioridad', 'fase_id'];
    importantFields.forEach(field => {
        const fieldRegex = new RegExp(`name=["']${field}["']`, 'i');
        if (fieldRegex.test(formContent)) {
            console.log(`‚úÖ Campo '${field}' encontrado`);
        } else {
            console.log(`‚ùå Campo '${field}' NO encontrado`);
        }
    });
    
    // Buscar bot√≥n submit
    const submitRegex = /<button[^>]*type=["']submit["'][^>]*>|<input[^>]*type=["']submit["'][^>]*>/i;
    if (submitRegex.test(formContent)) {
        console.log('‚úÖ Bot√≥n submit encontrado');
    } else {
        console.log('‚ùå Bot√≥n submit NO encontrado');
    }
    
} catch (error) {
    console.error('‚ùå Error leyendo task-create.ejs:', error.message);
}

console.log('\nüîç Verificando ruta POST en admin.js...');

try {
    const routePath = path.join(__dirname, 'src', 'routes', 'admin.js');
    const routeContent = fs.readFileSync(routePath, 'utf8');
    
    // Buscar la ruta POST para crear tareas
    const postRoutes = routeContent.match(/router\.post\([^)]+\)/g);
    if (postRoutes) {
        console.log('‚úÖ Rutas POST encontradas:');
        postRoutes.forEach(route => {
            console.log(`   ${route}`);
        });
    } else {
        console.log('‚ùå No se encontraron rutas POST');
    }
    
    // Buscar espec√≠ficamente la ruta de crear tarea
    if (routeContent.includes('createTask')) {
        console.log('‚úÖ Ruta createTask encontrada');
    } else {
        console.log('‚ùå Ruta createTask NO encontrada');
    }
    
} catch (error) {
    console.error('‚ùå Error leyendo admin.js:', error.message);
}

console.log('\nüìã RESUMEN DEL DIAGN√ìSTICO:');
console.log('1. req.body est√° vac√≠o - el formulario no env√≠a datos');
console.log('2. Verificar configuraci√≥n de body parser');
console.log('3. Verificar atributos del formulario (method, action, enctype)');
console.log('4. Verificar nombres de los campos');
console.log('5. Verificar que la ruta POST est√© configurada correctamente');

console.log('\nüîß PR√ìXIMOS PASOS:');
console.log('- Revisar la configuraci√≥n encontrada arriba');
console.log('- Verificar que el formulario tenga method="POST"');
console.log('- Verificar que los campos tengan los nombres correctos');
console.log('- Verificar que no haya JavaScript que interfiera con el env√≠o');