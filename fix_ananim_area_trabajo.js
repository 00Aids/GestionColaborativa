const { pool } = require('./src/config/database');

async function fixAnanimAreaTrabajo() {
    try {
        console.log('üîß CORRIGIENDO √ÅREA DE TRABAJO DEL COORDINADOR ANANIM');
        console.log('='.repeat(60));

        // 1. Verificar estado actual del coordinador
        console.log('\nüìã 1. ESTADO ACTUAL DEL COORDINADOR:');
        const [coordinator] = await pool.execute(`
            SELECT id, nombres, apellidos, email, area_trabajo_id 
            FROM usuarios 
            WHERE email = 'ananim@gmail.com'
        `);

        if (coordinator.length === 0) {
            console.log('‚ùå Coordinador ananim no encontrado');
            return;
        }

        const coord = coordinator[0];
        console.log(`‚úÖ Coordinador: ${coord.nombres} ${coord.apellidos}`);
        console.log(`   ID: ${coord.id}`);
        console.log(`   √Årea de trabajo actual: ${coord.area_trabajo_id || 'NULL'}`);

        // 2. Verificar proyectos asignados al coordinador
        console.log('\nüìã 2. PROYECTOS ASIGNADOS AL COORDINADOR:');
        const [assignedProjects] = await pool.execute(`
            SELECT DISTINCT p.id, p.titulo, p.area_trabajo_id, at.nombre as area_nombre
            FROM proyectos p
            LEFT JOIN proyecto_usuarios pu ON p.id = pu.proyecto_id
            LEFT JOIN areas_trabajo at ON p.area_trabajo_id = at.id
            WHERE pu.usuario_id = ? AND pu.rol = 'coordinador'
        `, [coord.id]);

        console.log(`üìä Proyectos asignados: ${assignedProjects.length}`);
        assignedProjects.forEach(project => {
            console.log(`   - ${project.titulo} (√Årea ID: ${project.area_trabajo_id}, √Årea: ${project.area_nombre})`);
        });

        // 3. Verificar todas las √°reas de trabajo disponibles
        console.log('\nüìã 3. √ÅREAS DE TRABAJO DISPONIBLES:');
        const [allAreas] = await pool.execute(`
            SELECT id, nombre, descripcion 
            FROM areas_trabajo 
            ORDER BY id
        `);

        console.log(`üìä √Åreas disponibles: ${allAreas.length}`);
        allAreas.forEach(area => {
            console.log(`   - ID: ${area.id}, Nombre: ${area.nombre}`);
        });

        // 4. Determinar el √°rea de trabajo correcta
        let correctAreaId = null;
        if (assignedProjects.length > 0) {
            // Usar el √°rea del primer proyecto asignado
            correctAreaId = assignedProjects[0].area_trabajo_id;
            console.log(`\nüí° √Årea de trabajo determinada por proyecto asignado: ${correctAreaId}`);
        } else {
            // Si no hay proyectos asignados, usar la primera √°rea disponible
            if (allAreas.length > 0) {
                correctAreaId = allAreas[0].id;
                console.log(`\nüí° √Årea de trabajo por defecto (primera disponible): ${correctAreaId}`);
            }
        }

        if (!correctAreaId) {
            console.log('\n‚ùå No se pudo determinar un √°rea de trabajo v√°lida');
            return;
        }

        // 5. Actualizar el √°rea de trabajo del coordinador
        console.log('\nüìã 5. ACTUALIZANDO √ÅREA DE TRABAJO:');
        const [updateResult] = await pool.execute(`
            UPDATE usuarios 
            SET area_trabajo_id = ? 
            WHERE id = ?
        `, [correctAreaId, coord.id]);

        console.log(`‚úÖ √Årea de trabajo actualizada: ${updateResult.affectedRows} fila(s) afectada(s)`);

        // 6. Verificar la actualizaci√≥n
        console.log('\nüìã 6. VERIFICANDO ACTUALIZACI√ìN:');
        const [updatedCoordinator] = await pool.execute(`
            SELECT u.id, u.nombres, u.apellidos, u.area_trabajo_id, at.nombre as area_nombre
            FROM usuarios u
            LEFT JOIN areas_trabajo at ON u.area_trabajo_id = at.id
            WHERE u.id = ?
        `, [coord.id]);

        const updated = updatedCoordinator[0];
        console.log(`‚úÖ Coordinador actualizado:`);
        console.log(`   Nombre: ${updated.nombres} ${updated.apellidos}`);
        console.log(`   √Årea ID: ${updated.area_trabajo_id}`);
        console.log(`   √Årea nombre: ${updated.area_nombre}`);

        // 7. Probar consulta de entregables con el √°rea corregida
        console.log('\nüìã 7. PROBANDO CONSULTA DE ENTREGABLES:');
        const [entregables] = await pool.execute(`
            SELECT 
                e.id,
                e.titulo,
                e.estado,
                p.titulo as proyecto_titulo,
                u.nombres as estudiante_nombres,
                u.apellidos as estudiante_apellidos
            FROM entregables e
            LEFT JOIN proyectos p ON e.proyecto_id = p.id
            LEFT JOIN usuarios u ON p.estudiante_id = u.id
            WHERE p.area_trabajo_id = ?
            ORDER BY e.created_at DESC
        `, [correctAreaId]);

        console.log(`üìä Entregables encontrados: ${entregables.length}`);
        entregables.forEach(e => {
            console.log(`   - ${e.titulo} (${e.estado}) - Proyecto: ${e.proyecto_titulo}`);
            console.log(`     Estudiante: ${e.estudiante_nombres || 'Sin asignar'} ${e.estudiante_apellidos || ''}`);
        });

        console.log('\n‚úÖ CORRECCI√ìN COMPLETADA');
        console.log('='.repeat(60));

    } catch (error) {
        console.error('‚ùå Error en la correcci√≥n:', error);
    } finally {
        await pool.end();
    }
}

fixAnanimAreaTrabajo();