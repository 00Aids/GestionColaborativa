const mysql = require('mysql2/promise');
require('dotenv').config();

async function testRealInvitationFlow() {
  let connection;
  
  try {
    // Conectar a la base de datos
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'gestion_colaborativa'
    });

    console.log('üß™ Probando flujo completo de invitaci√≥n con c√≥digo...\n');

    // 1. Crear un usuario de prueba
    console.log('üë§ PASO 1: Creando usuario de prueba...');
    
    const testEmail = 'test.real.invitation@example.com';
    const testPassword = 'password123';
    
    // Eliminar usuario si existe
    await connection.execute('DELETE FROM usuarios WHERE email = ?', [testEmail]);
    
    // Crear nuevo usuario
    const [userResult] = await connection.execute(
      `INSERT INTO usuarios (codigo_usuario, nombres, apellidos, email, password_hash, rol_id, activo, created_at, updated_at) 
       VALUES (?, ?, ?, ?, ?, ?, 1, NOW(), NOW())`,
      ['TESTREAL', 'Test', 'Real', testEmail, '$2a$10$dummy.hash.for.testing', 5]
    );
    
    const testUserId = userResult.insertId;
    console.log(`   ‚úÖ Usuario creado (ID: ${testUserId})`);

    // 2. Obtener un proyecto existente
    console.log('\nüìÅ PASO 2: Obteniendo proyecto existente...');
    
    const [projects] = await connection.execute(
      'SELECT id, titulo, area_trabajo_id FROM proyectos WHERE area_trabajo_id IS NOT NULL LIMIT 1'
    );
    
    if (projects.length === 0) {
      console.log('‚ùå No hay proyectos con √°rea de trabajo asignada');
      return;
    }
    
    const project = projects[0];
    console.log(`   üìÅ Proyecto: ${project.titulo} (ID: ${project.id})`);
    console.log(`   üè¢ √Årea de trabajo: ${project.area_trabajo_id}`);

    // 3. Crear c√≥digo de invitaci√≥n
    console.log('\nüé´ PASO 3: Creando c√≥digo de invitaci√≥n...');
    
    const invitationCode = 'TEST' + Math.random().toString(36).substr(2, 6).toUpperCase();
    
    const [invitationResult] = await connection.execute(
      `INSERT INTO invitaciones (proyecto_id, codigo_invitacion, invitado_por, estado, fecha_expiracion, created_at)
       VALUES (?, ?, 1, 'pendiente', DATE_ADD(NOW(), INTERVAL 7 DAY), NOW())`,
      [project.id, invitationCode]
    );
    
    console.log(`   üé´ C√≥digo de invitaci√≥n creado: ${invitationCode}`);
    console.log(`   üìã ID de invitaci√≥n: ${invitationResult.insertId}`);

    // 4. Simular el proceso de aceptar invitaci√≥n
    console.log('\nüéØ PASO 4: Simulando aceptaci√≥n de invitaci√≥n...');
    
    // Buscar la invitaci√≥n
    const [invitations] = await connection.execute(
      `SELECT i.*, p.area_trabajo_id 
       FROM invitaciones i 
       JOIN proyectos p ON i.proyecto_id = p.id 
       WHERE i.codigo_invitacion = ? AND i.estado = 'pendiente' AND i.fecha_expiracion > NOW()`,
      [invitationCode]
    );
    
    if (invitations.length === 0) {
      console.log('‚ùå No se encontr√≥ invitaci√≥n v√°lida');
      return;
    }
    
    const invitation = invitations[0];
    console.log(`   ‚úÖ Invitaci√≥n encontrada para proyecto ID: ${invitation.proyecto_id}`);
    console.log(`   üè¢ √Årea de trabajo del proyecto: ${invitation.area_trabajo_id}`);

    // 5. Verificar si el usuario pertenece al √°rea (deber√≠a ser false)
    console.log('\nüîç PASO 5: Verificando pertenencia inicial al √°rea...');
    
    const [initialArea] = await connection.execute(
      'SELECT * FROM usuario_areas_trabajo WHERE usuario_id = ? AND area_trabajo_id = ? AND activo = 1',
      [testUserId, invitation.area_trabajo_id]
    );
    
    const belongsToArea = initialArea.length > 0;
    console.log(`   belongsToArea resultado: ${belongsToArea}`);

    // 6. Asignar al √°rea si no pertenece (simulando userModel.assignToArea)
    if (!belongsToArea) {
      console.log('\nüîß PASO 6: Asignando usuario al √°rea de trabajo...');
      
      const [assignResult] = await connection.execute(
        `INSERT INTO usuario_areas_trabajo (usuario_id, area_trabajo_id, es_admin, es_propietario, activo, created_at)
         VALUES (?, ?, 0, 0, 1, NOW())`,
        [testUserId, invitation.area_trabajo_id]
      );
      
      console.log(`   ‚úÖ Usuario asignado al √°rea (Insert ID: ${assignResult.insertId})`);
    } else {
      console.log('\n‚úÖ PASO 6: Usuario ya pertenece al √°rea de trabajo');
    }

    // 7. Agregar usuario al proyecto
    console.log('\nüìã PASO 7: Agregando usuario al proyecto...');
    
    const [projectMember] = await connection.execute(
      `INSERT INTO proyecto_usuarios (proyecto_id, usuario_id, rol, estado, fecha_asignacion)
       VALUES (?, ?, 'estudiante', 'activo', NOW())`,
      [invitation.proyecto_id, testUserId]
    );
    
    console.log(`   ‚úÖ Usuario agregado al proyecto como estudiante`);

    // 8. Marcar invitaci√≥n como usada
    console.log('\n‚úÖ PASO 8: Marcando invitaci√≥n como usada...');
    
    await connection.execute(
      'UPDATE invitaciones SET estado = ?, fecha_aceptacion = NOW() WHERE id = ?',
      ['aceptada', invitation.id]
    );
    
    console.log('   ‚úÖ Invitaci√≥n marcada como aceptada');

    // 9. Verificaci√≥n final completa
    console.log('\nüéâ PASO 9: Verificaci√≥n final completa...');
    
    // Verificar √°rea de trabajo
    const [finalArea] = await connection.execute(
      'SELECT * FROM usuario_areas_trabajo WHERE usuario_id = ? AND area_trabajo_id = ? AND activo = 1',
      [testUserId, invitation.area_trabajo_id]
    );
    
    // Verificar membres√≠a del proyecto
    const [projectMembership] = await connection.execute(
      'SELECT * FROM proyecto_usuarios WHERE usuario_id = ? AND proyecto_id = ? AND estado = ?',
      [testUserId, invitation.proyecto_id, 'activo']
    );
    
    // Verificar estado de invitaci√≥n
    const [usedInvitation] = await connection.execute(
      'SELECT * FROM invitaciones WHERE id = ? AND estado = ?',
      [invitation.id, 'aceptada']
    );
    
    console.log(`\nüìä RESULTADO FINAL:`);
    console.log(`   üë§ Usuario: Test Real (${testEmail})`);
    console.log(`   üé´ C√≥digo usado: ${invitationCode}`);
    console.log(`   üè¢ Pertenece al √°rea: ${finalArea.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
    console.log(`   üìÅ Es miembro del proyecto: ${projectMembership.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
    console.log(`   üéØ Invitaci√≥n marcada como aceptada: ${usedInvitation.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    const success = finalArea.length > 0 && projectMembership.length > 0 && usedInvitation.length > 0;
    
    if (success) {
      console.log(`\nüéâ ¬°√âXITO COMPLETO! El flujo de invitaci√≥n funciona correctamente:`);
      console.log(`   ‚úÖ El usuario puede acceder a entregables del proyecto`);
      console.log(`   ‚úÖ El usuario puede acceder a comentarios del proyecto`);
      console.log(`   ‚úÖ El usuario tiene todas las funcionalidades del proyecto`);
      console.log(`   ‚úÖ La invitaci√≥n se marc√≥ correctamente como aceptada`);
    } else {
      console.log(`\n‚ùå FALLO: El flujo de invitaci√≥n no funcion√≥ correctamente`);
    }

    // 10. Limpiar datos de prueba
    console.log('\nüßπ PASO 10: Limpiando datos de prueba...');
    
    await connection.execute('DELETE FROM proyecto_usuarios WHERE usuario_id = ?', [testUserId]);
    await connection.execute('DELETE FROM usuario_areas_trabajo WHERE usuario_id = ?', [testUserId]);
    await connection.execute('DELETE FROM invitaciones WHERE id = ?', [invitation.id]);
    await connection.execute('DELETE FROM usuarios WHERE id = ?', [testUserId]);
    
    console.log('   ‚úÖ Datos de prueba eliminados');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

console.log('üöÄ Iniciando prueba del flujo completo de invitaci√≥n...\n');
testRealInvitationFlow();