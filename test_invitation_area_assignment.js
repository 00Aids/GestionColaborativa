const mysql = require('mysql2/promise');
require('dotenv').config();

async function testInvitationAreaAssignment() {
  let connection;
  
  try {
    // Conectar a la base de datos
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'gestion_colaborativa'
    });

    console.log('üß™ Probando asignaci√≥n autom√°tica de √°rea de trabajo en invitaciones...\n');

    // 1. Crear un usuario de prueba
    console.log('üë§ PASO 1: Creando usuario de prueba...');
    
    const testEmail = 'test.invitation@example.com';
    const testPassword = 'password123';
    
    // Eliminar usuario si existe
    await connection.execute('DELETE FROM usuarios WHERE email = ?', [testEmail]);
    
    // Crear nuevo usuario
    const [userResult] = await connection.execute(
      `INSERT INTO usuarios (codigo_usuario, nombres, apellidos, email, password_hash, rol_id, activo, created_at, updated_at) 
       VALUES (?, ?, ?, ?, ?, ?, 1, NOW(), NOW())`,
      ['TEST001', 'Test', 'Invitation', testEmail, '$2a$10$dummy.hash.for.testing', 5]
    );
    
    const testUserId = userResult.insertId;
    console.log(`   ‚úÖ Usuario creado (ID: ${testUserId})`);

    // 2. Obtener un proyecto existente
    console.log('\nüìÅ PASO 2: Obteniendo proyecto existente...');
    
    const [projects] = await connection.execute(
      'SELECT id, titulo, area_trabajo_id FROM proyectos WHERE area_trabajo_id IS NOT NULL LIMIT 1'
    );
    
    if (projects.length === 0) {
      console.log('‚ùå No hay proyectos con √°rea de trabajo asignada');
      return;
    }
    
    const project = projects[0];
    console.log(`   üìÅ Proyecto: ${project.titulo} (ID: ${project.id})`);
    console.log(`   üè¢ √Årea de trabajo: ${project.area_trabajo_id}`);

    // 3. Verificar que el usuario NO pertenece al √°rea inicialmente
    console.log('\nüîç PASO 3: Verificando estado inicial...');
    
    const [initialArea] = await connection.execute(
      'SELECT * FROM usuario_areas_trabajo WHERE usuario_id = ? AND area_trabajo_id = ? AND activo = 1',
      [testUserId, project.area_trabajo_id]
    );
    
    console.log(`   Usuario pertenece al √°rea inicialmente: ${initialArea.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);

    // 4. Simular el proceso de acceptInvitation
    console.log('\nüéØ PASO 4: Simulando acceptInvitation...');
    
    // Verificar si pertenece al √°rea (deber√≠a ser false)
    const belongsToArea = initialArea.length > 0;
    console.log(`   belongsToArea resultado: ${belongsToArea}`);
    
    if (!belongsToArea) {
      // Simular assignToArea
      console.log('   üîß Ejecutando assignToArea...');
      
      const [assignResult] = await connection.execute(
        `INSERT INTO usuario_areas_trabajo (usuario_id, area_trabajo_id, es_admin, es_propietario, activo, created_at)
         VALUES (?, ?, 0, 0, 1, NOW())`,
        [testUserId, project.area_trabajo_id]
      );
      
      console.log(`   ‚úÖ Usuario asignado al √°rea de trabajo (Insert ID: ${assignResult.insertId})`);
    }

    // 5. Verificar que ahora S√ç pertenece al √°rea
    console.log('\n‚úÖ PASO 5: Verificando resultado final...');
    
    const [finalArea] = await connection.execute(
      'SELECT * FROM usuario_areas_trabajo WHERE usuario_id = ? AND area_trabajo_id = ? AND activo = 1',
      [testUserId, project.area_trabajo_id]
    );
    
    console.log(`   Usuario pertenece al √°rea despu√©s: ${finalArea.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    // 6. Simular agregar al proyecto
    console.log('\nüìã PASO 6: Agregando usuario al proyecto...');
    
    const [projectMember] = await connection.execute(
      `INSERT INTO proyecto_usuarios (proyecto_id, usuario_id, rol, estado, fecha_asignacion)
       VALUES (?, ?, 'estudiante', 'activo', NOW())`,
      [project.id, testUserId]
    );
    
    console.log(`   ‚úÖ Usuario agregado al proyecto (Insert ID: ${projectMember.insertId})`);

    // 7. Verificar acceso completo
    console.log('\nüéâ PASO 7: Verificaci√≥n final de acceso...');
    
    // Verificar √°rea de trabajo
    const [userWithArea] = await connection.execute(
      `SELECT u.id, u.nombres, u.apellidos, u.email, u.area_trabajo_id,
              uat.area_trabajo_id as assigned_area
       FROM usuarios u
       LEFT JOIN usuario_areas_trabajo uat ON u.id = uat.usuario_id AND uat.activo = 1
       WHERE u.id = ?`,
      [testUserId]
    );
    
    // Verificar membres√≠a del proyecto
    const [projectMembership] = await connection.execute(
      'SELECT * FROM proyecto_usuarios WHERE usuario_id = ? AND proyecto_id = ? AND estado = ?',
      [testUserId, project.id, 'activo']
    );
    
    console.log(`\nüìä RESULTADO FINAL:`);
    console.log(`   üë§ Usuario: ${userWithArea[0].nombres} ${userWithArea[0].apellidos}`);
    console.log(`   üè¢ √Årea asignada: ${userWithArea[0].assigned_area}`);
    console.log(`   üìÅ Proyecto √°rea: ${project.area_trabajo_id}`);
    console.log(`   üîó Es miembro del proyecto: ${projectMembership.length > 0 ? '‚úÖ S√≠' : '‚ùå No'}`);
    console.log(`   ‚úÖ √Åreas coinciden: ${userWithArea[0].assigned_area == project.area_trabajo_id ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    if (userWithArea[0].assigned_area == project.area_trabajo_id && projectMembership.length > 0) {
      console.log(`\nüéâ ¬°√âXITO! El usuario ahora puede acceder a:`);
      console.log(`   - Entregables del proyecto`);
      console.log(`   - Comentarios del proyecto`);
      console.log(`   - Todas las funcionalidades del proyecto`);
    }

    // 8. Limpiar datos de prueba
    console.log('\nüßπ PASO 8: Limpiando datos de prueba...');
    
    await connection.execute('DELETE FROM proyecto_usuarios WHERE usuario_id = ?', [testUserId]);
    await connection.execute('DELETE FROM usuario_areas_trabajo WHERE usuario_id = ?', [testUserId]);
    await connection.execute('DELETE FROM usuarios WHERE id = ?', [testUserId]);
    
    console.log('   ‚úÖ Datos de prueba eliminados');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

console.log('üöÄ Iniciando prueba de asignaci√≥n autom√°tica de √°rea de trabajo...\n');
testInvitationAreaAssignment();