<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalles del Proyecto - <%= project.nombre %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        /* ===== SIDEBAR ===== */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 30px 0;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            transition: all 0.3s ease;
            overflow-y: auto;
        }

        .sidebar-header {
            padding: 0 30px 30px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: -30px 0 0 0;
        }

        .sidebar-header h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 12px;
            padding-top: 30px;
        }

        .sidebar-header .subtitle {
            font-size: 14px;
            opacity: 0.9;
            margin-top: 8px;
            font-weight: 400;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .nav-section {
            margin-bottom: 25px;
        }

        .nav-section-title {
            font-size: 11px;
            font-weight: 600;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 1px;
            padding: 0 25px 8px;
            margin-bottom: 8px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 25px;
            color: #64748b;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 14px;
            border-left: 3px solid transparent;
        }

        .nav-item i {
            width: 20px;
            margin-right: 12px;
            font-size: 16px;
        }

        .nav-item:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            border-left-color: #667eea;
            transform: translateX(5px);
        }

        .nav-item.active {
            background: rgba(102, 126, 234, 0.15);
            color: #667eea;
            border-left-color: #667eea;
            font-weight: 600;
        }

        .container {
            margin-left: 280px;
            margin-right: 0;
            padding: 20px 30px 20px 30px;
            width: calc(100vw - 280px);
            box-sizing: border-box;
        }

        /* Header moderno */
        .header {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 20px 25px;
            margin: 0 0 25px 0;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08), 0 4px 20px rgba(102, 126, 234, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            width: 100%;
            box-sizing: border-box;
            justify-content: space-between;
            align-items: center;
            position: relative;
            overflow: hidden;
            min-height: 80px;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 40px;
            flex: 1;
            min-width: 0;
        }

        /* Breadcrumb integrado */
        .header-breadcrumb {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 18px;
            border-radius: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            padding: 6px 12px;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .breadcrumb-link:hover {
            background: rgba(102, 126, 234, 0.15);
            color: #764ba2;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
        }

        .breadcrumb-separator {
            color: rgba(255, 255, 255, 0.6);
            font-size: 12px;
            font-weight: 600;
        }

        .breadcrumb-current {
            color: #2c3e50;
            font-weight: 700;
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.25);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        /* Acciones r√°pidas */
        .quick-actions {
            display: flex;
            gap: 12px;
            margin-right: 25px;
        }

        .quick-action-btn {
            background: rgba(102, 126, 234, 0.08);
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 12px;
            padding: 12px;
            color: #667eea;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 16px;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .quick-action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.5s;
        }

        .quick-action-btn:hover::before {
            left: 100%;
        }

        .quick-action-btn:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            border-color: transparent;
        }

        .logo {
            font-size: 22px;
            font-weight: 800;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            display: flex;
            align-items: center;
            gap: 12px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .logo i {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            filter: drop-shadow(0 2px 4px rgba(102, 126, 234, 0.3));
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 25px;
            flex-shrink: 0;
        }

        .admin-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 18px;
            border-radius: 25px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .admin-badge::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s;
        }

        .admin-badge:hover::before {
            left: 100%;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #555;
        }

        .user-avatar {
            width: 44px;
            height: 44px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 16px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }

        .user-avatar:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .logout-btn {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
            color: white;
            padding: 12px 24px;
            border-radius: 30px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(255, 71, 87, 0.3);
            position: relative;
            overflow: hidden;
        }

        .logout-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .logout-btn:hover::before {
            left: 100%;
        }

        .logout-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 71, 87, 0.4);
        }

        /* Breadcrumb moderno */
        .breadcrumb {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 25px;
            border-radius: 12px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .breadcrumb a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }

        .breadcrumb a:hover {
            color: #764ba2;
        }

        /* Layout principal */
        .main-layout {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 20px;
            margin-bottom: 20px;
            width: 100%;
        }

        /* Tarjeta principal del proyecto */
        .project-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            width: 100%;
            box-sizing: border-box;
        }

        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .project-title {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 8px;
        }

        .project-meta {
            display: flex;
            gap: 20px;
            color: #666;
            font-size: 14px;
        }

        .project-meta span {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active { background: #d4edda; color: #155724; }
        .status-completed { background: #cce5ff; color: #004085; }
        .status-paused { background: #fff3cd; color: #856404; }
        .status-cancelled { background: #f8d7da; color: #721c24; }

        /* Botones de acci√≥n */
        .action-buttons {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            cursor: pointer;
            font-size: 14px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-info {
            background: linear-gradient(45deg, #17a2b8, #20c997);
            color: white;
        }

        .btn-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(23, 162, 184, 0.3);
        }

        .btn-success {
            background: linear-gradient(45deg, #56ab2f, #a8e6cf);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(45deg, #f093fb, #f5576c);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(45deg, #ff4757, #ff3742);
            color: white;
        }

        /* Sidebar de estad√≠sticas */
        .stats-sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .stats-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 20px;
            max-width: 100%;
            overflow: hidden;
        }

        .stat-item {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 12px;
        }

        .stat-number {
            font-size: 20px;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 5px;
        }

        /* Pesta√±as modernas */
        .tabs-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            margin-top: 30px;
        }

        .tabs-nav {
            display: flex;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 5px;
            margin-bottom: 25px;
            overflow-x: auto;
        }

        .tab-button {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: transparent;
            border-radius: 10px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            min-width: 120px;
        }

        .tab-button.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            min-height: 300px;
        }

        .tab-pane {
            display: none;
        }

        .tab-pane.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Tablas modernas */
        .modern-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .modern-table th {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
        }

        .modern-table td {
            padding: 15px;
            border-bottom: 1px solid #f1f3f4;
        }

        .modern-table tr:hover {
            background: #f8f9fa;
        }

        /* Formularios modernos */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Alertas modernas */
        .alert {
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .alert-info {
            background: #e3f2fd;
            color: #1565c0;
            border-left: 4px solid #2196f3;
        }

        .alert-success {
            background: #e8f5e8;
            color: #2e7d32;
            border-left: 4px solid #4caf50;
        }

        .alert-warning {
            background: #fff8e1;
            color: #f57c00;
            border-left: 4px solid #ff9800;
        }

        /* Estilos para la barra de progreso */
        .progress-bar {
            background: linear-gradient(45deg, #667eea, #764ba2);
            height: 20px;
            border-radius: 8px;
            transition: width 0.3s ease;
            width: 0%;
        }

        /* Estilos para d√≠as restantes */
        .days-left {
            font-weight: bold;
        }

        .days-left[data-days] {
            font-weight: 600;
            color: #28a745; /* Default green for more than 7 days */
        }

        /* Estilos para el tablero Kanban */
        .kanban-board {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
            padding: 20px 0;
        }

        .kanban-column {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-height: 400px;
        }

        .kanban-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f3f4;
        }

        .kanban-title {
            font-weight: 600;
            font-size: 16px;
            color: #333;
        }

        .kanban-count {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .kanban-tasks {
            display: flex;
            flex-direction: column;
            gap: 12px;
            min-height: 300px;
        }

        .kanban-task {
            background: white;
            border-radius: 10px;
            padding: 16px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .kanban-task:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .kanban-task.priority-high {
            border-left-color: #dc3545;
        }

        .kanban-task.priority-medium {
            border-left-color: #ffc107;
        }

        .kanban-task.priority-low {
            border-left-color: #28a745;
        }

        .task-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 14px;
            line-height: 1.4;
        }

        .task-description {
            color: #666;
            font-size: 12px;
            margin-bottom: 12px;
            line-height: 1.4;
        }

        .task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 11px;
            color: #888;
        }

        .task-assignee {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .task-avatar {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: 600;
        }

        .task-due-date {
            font-weight: 500;
        }

        .task-priority {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .task-priority.high {
            background: #dc3545;
        }

        .task-priority.medium {
            background: #ffc107;
        }

        .task-priority.low {
            background: #28a745;
        }

        .kanban-empty {
            text-align: center;
            color: #888;
            font-style: italic;
            padding: 40px 20px;
            border: 2px dashed #ddd;
            border-radius: 10px;
            background: #f8f9fa;
        }

        .kanban-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            align-items: center;
        }

        .kanban-toggle {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .kanban-toggle:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .kanban-toggle.active {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        /* Estilos para el dashboard mejorado */
        .stat-item.modern {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            min-width: 0;
            overflow: hidden;
        }

        .stat-item.modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .stat-icon {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            flex-shrink: 0;
        }

        .stat-content {
            display: flex;
            flex-direction: column;
            min-width: 0;
            flex: 1;
        }

        .stat-content .stat-number {
            font-size: 20px;
            font-weight: 700;
            color: #2c3e50;
            line-height: 1;
        }

        .stat-content .stat-label {
            font-size: 11px;
            color: #666;
            margin-top: 2px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Barra de progreso moderna */
        .progress-container {
            position: relative;
            margin-bottom: 20px;
        }

        .progress-bar-modern {
            height: 12px;
            background: #f1f3f4;
            border-radius: 6px;
            overflow: hidden;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 6px;
            transition: width 0.8s ease;
            position: relative;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .progress-text {
            position: absolute;
            right: 0;
            top: -25px;
            font-weight: 600;
            color: #2c3e50;
            font-size: 14px;
        }

        /* Desglose de tareas */
        .task-breakdown {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .breakdown-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 0;
        }

        .breakdown-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
        }

        .breakdown-color.completed {
            background: #28a745;
        }

        .breakdown-color.in-progress {
            background: #ffc107;
        }

        .breakdown-color.todo {
            background: #6c757d;
        }

        .breakdown-label {
            flex: 1;
            font-size: 13px;
            color: #666;
        }

        .breakdown-count {
            font-weight: 600;
            color: #2c3e50;
            font-size: 13px;
        }

        /* Timeline del proyecto */
        .timeline-info {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .timeline-item {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .timeline-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: white;
        }

        .timeline-icon.start {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        .timeline-icon.end {
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .timeline-icon.warning {
            background: linear-gradient(45deg, #ffc107, #fd7e14);
        }

        .timeline-icon.overdue {
            background: linear-gradient(45deg, #dc3545, #c82333);
        }

        .timeline-content {
            display: flex;
            flex-direction: column;
        }

        .timeline-label {
            font-size: 12px;
            color: #666;
            font-weight: 500;
        }

        .timeline-date {
            font-size: 13px;
            color: #2c3e50;
            font-weight: 600;
        }

        /* Progreso temporal */
        .time-remaining {
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .time-progress-bar {
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .time-progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.8s ease;
        }

        .time-stats {
            text-align: center;
        }

        .days-left {
            font-size: 13px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        .days-left.good {
            color: #28a745;
        }

        .days-left.warning {
            color: #ffc107;
        }

        .days-left.overdue {
            color: #dc3545;
        }

        /* M√©tricas de rendimiento */
        .performance-metrics {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .metric-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .metric-item:hover {
            background: #e9ecef;
        }

        .metric-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .metric-content {
            display: flex;
            flex-direction: column;
        }

        .metric-value {
            font-size: 18px;
            font-weight: 700;
            color: #2c3e50;
            line-height: 1;
        }

        .metric-label {
            font-size: 11px;
            color: #666;
            margin-top: 2px;
        }

        /* Estilos para el Timeline */
        .timeline-container {
            position: relative;
            padding: 20px 0;
            max-height: 600px;
            overflow-y: auto;
        }

        .timeline-line {
            position: absolute;
            left: 30px;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(to bottom, #667eea, #764ba2);
            border-radius: 2px;
        }

        .timeline-event {
            position: relative;
            margin-bottom: 30px;
            padding-left: 80px;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
        }

        .timeline-event:nth-child(even) {
            animation-delay: 0.1s;
        }

        .timeline-event:nth-child(odd) {
            animation-delay: 0.2s;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .timeline-marker {
            position: absolute;
            left: -50px;
            top: 5px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 2;
        }

        .timeline-marker.project-marker {
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .timeline-marker.member-marker {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        .timeline-marker.task-marker {
            background: linear-gradient(45deg, #ffc107, #fd7e14);
        }

        .timeline-marker.task-done {
            background: linear-gradient(45deg, #28a745, #20c997);
        }

        .timeline-marker.task-in-progress {
            background: linear-gradient(45deg, #17a2b8, #007bff);
        }

        .timeline-marker.current-marker {
            background: linear-gradient(45deg, #dc3545, #c82333);
            animation: pulse 2s infinite;
        }

        .timeline-marker.deadline-marker {
            background: linear-gradient(45deg, #6f42c1, #e83e8c);
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }

        .timeline-content-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
        }

        .timeline-content-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .timeline-content-card.current-card {
            border-left-color: #dc3545;
            background: linear-gradient(135deg, #fff, #fff8f8);
        }

        .timeline-content-card.future-card {
            border-left-color: #6f42c1;
            background: linear-gradient(135deg, #fff, #f8f7ff);
            opacity: 0.9;
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .timeline-header h4 {
            margin: 0;
            color: #2c3e50;
            font-size: 16px;
            font-weight: 600;
        }

        .timeline-date {
            font-size: 12px;
            color: #666;
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 500;
        }

        .timeline-description {
            color: #666;
            font-size: 14px;
            margin: 8px 0;
            line-height: 1.4;
        }

        .timeline-meta {
            display: flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 12px;
        }

        .timeline-tag {
            font-size: 11px;
            padding: 3px 8px;
            border-radius: 12px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .timeline-tag.project-tag {
            background: #e3f2fd;
            color: #1976d2;
        }

        .timeline-tag.member-tag {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .timeline-tag.task-tag {
            background: #fff3e0;
            color: #f57c00;
        }

        .timeline-tag.current-tag {
            background: #ffebee;
            color: #c62828;
        }

        .timeline-tag.deadline-tag {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .timeline-role {
            font-size: 11px;
            background: #e9ecef;
            color: #495057;
            padding: 3px 8px;
            border-radius: 12px;
            font-weight: 500;
        }

        .timeline-assignee {
            font-size: 11px;
            color: #666;
            font-style: italic;
        }

        .current-progress {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .progress-mini {
            width: 60px;
            height: 6px;
            background: #e9ecef;
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-mini-fill {
            height: 100%;
            background: linear-gradient(45deg, #28a745, #20c997);
            border-radius: 3px;
            transition: width 0.8s ease;
        }

        .days-remaining {
            font-size: 11px;
            font-weight: 600;
            color: #666;
        }

        /* Filtros del timeline */
        .timeline-filters {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .timeline-event[data-type]:not([data-type="all"]) {
            transition: all 0.3s ease;
        }

        .timeline-event.hidden {
            opacity: 0.3;
            transform: scale(0.95);
            pointer-events: none;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .timeline-container {
                padding-left: 20px;
            }

            .timeline-line {
                left: 20px;
            }

            .timeline-event {
                padding-left: 60px;
            }

            .timeline-marker {
                left: -40px;
                width: 32px;
                height: 32px;
                font-size: 14px;
            }

            .timeline-content-card {
                padding: 15px;
            }

            .timeline-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }
        }

        /* Estilos para badges de prioridad */
        .priority-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-alta {
            background: #ffebee;
            color: #c62828;
        }

        .priority-media {
            background: #fff8e1;
            color: #f57c00;
        }

        .priority-baja {
            background: #e8f5e8;
            color: #2e7d32;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .main-layout {
                grid-template-columns: 1fr;
            }
            
            .stats-sidebar {
                order: -1;
            }
        }

        /* Mobile menu toggle */
        .mobile-menu-toggle {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 8px;
            padding: 10px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            .mobile-menu-toggle {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .container {
                margin-left: 0;
                padding: 15px;
            }
            
            .header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }
            
            .project-header {
                flex-direction: column;
                gap: 15px;
            }
            
            .action-buttons {
                justify-content: center;
            }
            
            .tabs-nav {
                flex-direction: column;
            }
            
            .tab-button {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>
                <i class="fas fa-shield-alt"></i>
                Admin Panel
            </h2>
            <div class="subtitle">Sistema de Gesti√≥n</div>
        </div>
        
        <nav class="sidebar-nav">
            <div class="nav-section">
                <div class="nav-section-title">Principal</div>
                <a href="/dashboard/admin" class="nav-item">
                    <i class="fas fa-tachometer-alt"></i>
                    Dashboard
                </a>
                <a href="/admin/projects" class="nav-item active">
                    <i class="fas fa-project-diagram"></i>
                    Proyectos
                </a>
                <a href="/admin/users" class="nav-item">
                    <i class="fas fa-users"></i>
                    Usuarios
                </a>
                <a href="/admin/roles" class="nav-item">
                    <i class="fas fa-user-shield"></i>
                    Roles
                </a>
            </div>
            
            <div class="nav-section">
                <div class="nav-section-title">Gesti√≥n</div>
                <a href="/admin/invitations" class="nav-item">
                    <i class="fas fa-envelope-open-text"></i>
                    C√≥digos de Invitaci√≥n
                </a>
                <a href="/admin/calendar" class="nav-item">
                    <i class="fas fa-calendar-alt"></i>
                    Calendario
                </a>
                <a href="/admin/reports" class="nav-item">
                    <i class="fas fa-chart-bar"></i>
                    Reportes
                </a>
                <a href="/admin/settings" class="nav-item">
                    <i class="fas fa-cog"></i>
                    Configuraci√≥n
                </a>
            </div>
        </nav>
    </div>

    <!-- Mobile menu toggle -->
    <button class="mobile-menu-toggle" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>

    <div class="container">
        <!-- Header Modernizado -->
        <header class="header">
            <div class="header-left">
                <div class="logo">
                    <i class="fas fa-project-diagram"></i>
                    Admin Panel
                </div>
                <!-- Breadcrumb integrado en el header -->
                <nav class="header-breadcrumb">
                    <span class="breadcrumb-current">
                        <%= project.nombre %>
                    </span>
                </nav>
            </div>
            <div class="header-right">
                <!-- Acciones r√°pidas -->
                <div class="quick-actions">
                    <button onclick="viewTaskKanban()" class="quick-action-btn" title="Vista Kanban">
                        <i class="fas fa-columns"></i>
                    </button>
                    <button onclick="generateReport()" class="quick-action-btn" title="Generar Reporte">
                        <i class="fas fa-chart-bar"></i>
                    </button>
                    <button onclick="showInviteModal()" class="quick-action-btn" title="Invitar Miembros">
                        <i class="fas fa-user-plus"></i>
                    </button>
                </div>
                <div class="admin-badge">Administrador</div>
                <div class="user-info">
                    <div class="user-avatar"><%= user.nombres.charAt(0).toUpperCase() %></div>
                    <span><%= user.nombres %> <%= user.apellidos %></span>
                </div>
                <a href="/auth/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    Cerrar Sesi√≥n
                </a>
            </div>
        </header>

        <!-- Layout principal -->
        <div class="main-layout">
            <!-- Tarjeta principal del proyecto -->
            <div class="project-card">
                <div class="project-header">
                    <div>
                        <h1 class="project-title"><%= project.nombre %></h1>
                        <div class="project-meta">
                            <span><i class="fas fa-calendar"></i> Creado: <%= new Date(project.fecha_creacion).toLocaleDateString('es-ES') %></span>
                            <span><i class="fas fa-clock"></i> Fecha l√≠mite: <%= project.fecha_limite ? new Date(project.fecha_limite).toLocaleDateString('es-ES') : 'No definida' %></span>
                        </div>
                    </div>
                    <div>
                        <span class="status-badge status-<%= project.estado.toLowerCase() %>">
                            <i class="fas fa-circle"></i>
                            <%= project.estado %>
                        </span>
                    </div>
                </div>

                <div class="project-description">
                    <h3 style="margin-bottom: 15px; color: #2c3e50;"><i class="fas fa-info-circle"></i> Descripci√≥n</h3>
                    <p style="line-height: 1.6; color: #555;"><%= project.descripcion || 'Sin descripci√≥n disponible' %></p>
                </div>

                <div class="action-buttons" style="margin-top: 25px;">
                    <a href="/admin/projects/<%= project.id %>/edit" class="btn btn-primary">
                        <i class="fas fa-edit"></i> Editar Proyecto
                    </a>
                    <button onclick="showInviteModal()" class="btn btn-success">
                        <i class="fas fa-user-plus"></i> Invitar Miembros
                    </button>
                    <button onclick="generateReport()" class="btn btn-warning">
                        <i class="fas fa-chart-bar"></i> Generar Reporte
                    </button>
                    <% if (project.estado !== 'completado') { %>
                    <button onclick="showConfirmDialog('¬øCompletar proyecto?', 'Esta acci√≥n marcar√° el proyecto como completado.', () => completeProject(<%= project.id %>))" class="btn btn-success">
                        <i class="fas fa-check"></i> Completar
                    </button>
                    <% } %>
                    <button onclick="showConfirmDialog('¬øEliminar proyecto?', 'Esta acci√≥n no se puede deshacer.', () => deleteProject(<%= project.id %>))" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            </div>

            <!-- Dashboard de estad√≠sticas mejorado -->
            <div class="stats-sidebar">
                <!-- M√©tricas principales -->
                <div class="stats-card">
                    <h3 style="margin-bottom: 20px; color: #2c3e50; text-align: center;">
                        <i class="fas fa-chart-line"></i> Dashboard del Proyecto
                    </h3>
                    <div class="stats-grid">
                        <div class="stat-item modern">
                            <div class="stat-icon">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="stat-content">
                                <span class="stat-number"><%= members.length %></span>
                                <span class="stat-label">Miembros Activos</span>
                            </div>
                        </div>
                        <div class="stat-item modern">
                            <div class="stat-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                            <div class="stat-content">
                                <span class="stat-number"><%= tasksGrouped.done.length %></span>
                                <span class="stat-label">Tareas Completadas</span>
                            </div>
                        </div>
                        <div class="stat-item modern">
                            <div class="stat-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="stat-content">
                                <span class="stat-number"><%= tasksGrouped.in_progress.length %></span>
                                <span class="stat-label">En Progreso</span>
                            </div>
                        </div>
                        <div class="stat-item modern">
                            <div class="stat-icon">
                                <i class="fas fa-envelope"></i>
                            </div>
                            <div class="stat-content">
                                <span class="stat-number"><%= invitations.length %></span>
                                <span class="stat-label">Invitaciones</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Progreso avanzado de tareas -->
                <div class="stats-card">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">
                        <i class="fas fa-tasks"></i> Progreso Detallado
                    </h4>
                    <% 
                        const totalTasks = tasks.length;
                        const completedTasks = tasksGrouped.done.length;
                        const inProgressTasks = tasksGrouped.in_progress.length;
                        const todoTasks = tasksGrouped.todo.length;
                        const progress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
                    %>
                    
                    <!-- Barra de progreso principal -->
                    <div class="progress-container">
                        <div class="progress-bar-modern" data-progress="<%= progress %>">
                            <div class="progress-fill" style="width: <%= progress %>%"></div>
                        </div>
                        <span class="progress-text"><%= progress %>%</span>
                    </div>
                    
                    <!-- Desglose de tareas -->
                    <div class="task-breakdown">
                        <div class="breakdown-item">
                            <div class="breakdown-color completed"></div>
                            <span class="breakdown-label">Completadas</span>
                            <span class="breakdown-count"><%= completedTasks %></span>
                        </div>
                        <div class="breakdown-item">
                            <div class="breakdown-color in-progress"></div>
                            <span class="breakdown-label">En Progreso</span>
                            <span class="breakdown-count"><%= inProgressTasks %></span>
                        </div>
                        <div class="breakdown-item">
                            <div class="breakdown-color todo"></div>
                            <span class="breakdown-label">Por Hacer</span>
                            <span class="breakdown-count"><%= todoTasks %></span>
                        </div>
                    </div>
                </div>

                <!-- Informaci√≥n temporal mejorada -->
                <div class="stats-card">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">
                        <i class="fas fa-calendar-alt"></i> Timeline del Proyecto
                    </h4>
                    <div class="timeline-info">
                        <div class="timeline-item">
                            <div class="timeline-icon start">
                                <i class="fas fa-play"></i>
                            </div>
                            <div class="timeline-content">
                                <span class="timeline-label">Inicio</span>
                                <span class="timeline-date">
                                    <% 
                                        try {
                                            const fechaInicio = project.fecha_creacion ? new Date(project.fecha_creacion) : new Date();
                                            if (isNaN(fechaInicio.getTime())) {
                                                throw new Error('Invalid date');
                                            }
                                    %>
                                        <%= fechaInicio.toLocaleDateString('es-ES') %>
                                    <% 
                                        } catch (e) {
                                    %>
                                        <%= new Date().toLocaleDateString('es-ES') %>
                                    <% 
                                        }
                                    %>
                                </span>
                            </div>
                        </div>
                        
                        <% if (project.fecha_limite) { %>
                        <% 
                            try {
                                const fechaLimite = new Date(project.fecha_limite);
                                const fechaInicio = project.fecha_creacion ? new Date(project.fecha_creacion) : new Date();
                                
                                if (isNaN(fechaLimite.getTime()) || isNaN(fechaInicio.getTime())) {
                                    throw new Error('Invalid dates');
                                }
                                
                                const daysLeft = Math.ceil((fechaLimite - new Date()) / (1000 * 60 * 60 * 24));
                                const totalDays = Math.ceil((fechaLimite - fechaInicio) / (1000 * 60 * 60 * 24));
                                const elapsedDays = totalDays - daysLeft;
                                const timeProgress = totalDays > 0 ? Math.round((elapsedDays / totalDays) * 100) : 0;
                        %>
                        <div class="timeline-item">
                            <div class="timeline-icon end <%= daysLeft <= 0 ? 'overdue' : (daysLeft <= 7 ? 'warning' : '') %>">
                                <i class="fas fa-flag-checkered"></i>
                            </div>
                            <div class="timeline-content">
                                <span class="timeline-label">Fecha L√≠mite</span>
                                <span class="timeline-date"><%= fechaLimite.toLocaleDateString('es-ES') %></span>
                            </div>
                        </div>
                        
                        <div class="time-remaining">
                            <div class="time-progress-bar">
                                <div class="time-progress-fill" style="width: <%= timeProgress %>%"></div>
                            </div>
                            <div class="time-stats">
                                <span class="days-left <%= daysLeft <= 0 ? 'overdue' : (daysLeft <= 7 ? 'warning' : 'good') %>">
                                    <i class="fas fa-clock"></i>
                                    <%= daysLeft > 0 ? daysLeft + ' d√≠as restantes' : 'Proyecto vencido' %>
                                </span>
                            </div>
                        </div>
                        <% 
                            } catch (e) {
                                // Si hay error con las fechas, no mostrar la secci√≥n de fecha l√≠mite
                            }
                        %>
                        <% } %>
                    </div>
                </div>

                <!-- M√©tricas de rendimiento -->
                <div class="stats-card">
                    <h4 style="margin-bottom: 15px; color: #2c3e50;">
                        <i class="fas fa-chart-bar"></i> M√©tricas de Rendimiento
                    </h4>
                    <div class="performance-metrics">
                        <div class="metric-item">
                            <div class="metric-icon">
                                <i class="fas fa-tachometer-alt"></i>
                            </div>
                            <div class="metric-content">
                                <span class="metric-value"><%= Math.round((completedTasks / Math.max(1, (Date.now() - new Date(project.fecha_creacion)) / (1000 * 60 * 60 * 24))) * 10) / 10 %></span>
                                <span class="metric-label">Tareas/d√≠a</span>
                            </div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-icon">
                                <i class="fas fa-users-cog"></i>
                            </div>
                            <div class="metric-content">
                                <span class="metric-value"><%= members.length > 0 ? Math.round((completedTasks / members.length) * 10) / 10 : 0 %></span>
                                <span class="metric-label">Tareas/miembro</span>
                            </div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-icon">
                                <i class="fas fa-percentage"></i>
                            </div>
                            <div class="metric-content">
                                <span class="metric-value"><%= progress %>%</span>
                                <span class="metric-label">Completado</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pesta√±as de gesti√≥n -->
        <div class="tabs-container">
            <div class="tabs-nav">
                <button class="tab-button active" onclick="showTab('members')">
                    <i class="fas fa-users"></i> Miembros
                </button>
                <button class="tab-button" onclick="showTab('tasks')">
                    <i class="fas fa-tasks"></i> Tareas
                </button>
                <button class="tab-button" onclick="showTab('timeline')">
                    <i class="fas fa-clock"></i> Timeline
                </button>
                <button class="tab-button" onclick="showTab('invitations')">
                    <i class="fas fa-envelope"></i> Invitaciones
                </button>
                <button class="tab-button" onclick="showTab('activity')">
                    <i class="fas fa-history"></i> Actividad
                </button>
            </div>

            <div class="tab-content">
                <!-- Pesta√±a de Miembros -->
                <div id="members" class="tab-pane active">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3><i class="fas fa-users"></i> Miembros del Proyecto (<%= members.length %>)</h3>
                        <button onclick="showInviteModal()" class="btn btn-primary">
                            <i class="fas fa-user-plus"></i> Agregar Miembro
                        </button>
                    </div>
                    
                    <% if (members.length > 0) { %>
                    <table class="modern-table">
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Rol</th>
                                <th>Fecha de Uni√≥n</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% members.forEach(member => { %>
                            <tr>
                                <td>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <div class="user-avatar" style="width: 32px; height: 32px; font-size: 14px;">
                                            <%= member.nombres.charAt(0).toUpperCase() %>
                                        </div>
                                        <div>
                                            <strong><%= member.nombres %> <%= member.apellidos %></strong>
                                            <br><small style="color: #666;"><%= member.email %></small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="status-badge" style="background: #e3f2fd; color: #1565c0;">
                                        <%= member.rol_nombre %>
                                    </span>
                                </td>
                                <td><%= new Date(member.fecha_union).toLocaleDateString('es-ES') %></td>
                                <td>
                                    <span class="status-badge status-active">Activo</span>
                                </td>
                                <td>
                                    <button onclick="editMemberRole(<%= member.usuario_id %>)" class="btn btn-primary" style="padding: 6px 12px; font-size: 12px;">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button onclick="showConfirmDialog('¬øRemover miembro?', 'Esta acci√≥n remover√° al usuario del proyecto.', () => removeMember(<%= member.usuario_id %>))" class="btn btn-danger" style="padding: 6px 12px; font-size: 12px;">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        No hay miembros asignados a este proyecto.
                    </div>
                    <% } %>
                </div>

                <!-- Pesta√±a de Tareas - Vista Kanban -->
                <div id="tasks" class="tab-pane">
                    <div class="kanban-header">
                        <div class="kanban-title">
                            <h3><i class="fas fa-columns"></i> Tablero Kanban - <%= project.nombre %></h3>
                            <span class="task-count">(<%= tasks.length %> tareas)</span>
                        </div>
                        <div class="kanban-actions">
                            <button onclick="window.location.href='/admin/projects/<%= project.id %>/tasks/kanban'" class="btn btn-info">
                                <i class="fas fa-expand"></i> Vista Kanban Completa
                            </button>
                            <button onclick="toggleKanbanView()" class="btn btn-secondary">
                                <i class="fas fa-list"></i> Vista Lista
                            </button>
                            <button onclick="openTaskModal()" class="btn btn-primary">
                                <i class="fas fa-plus"></i> Nueva Tarea
                            </button>
                        </div>
                    </div>

                    <!-- Tablero Kanban -->
                    <div class="kanban-board">
                        <!-- Columna: Por Hacer -->
                        <div class="kanban-column" data-status="todo">
                            <div class="column-header">
                                <div class="column-title">
                                    <i class="fas fa-clock"></i>
                                    <span>Por Hacer</span>
                                </div>
                                <div class="column-count">
                                    <%= tasksGrouped.todo.length %>
                                </div>
                            </div>
                            <div class="column-content" id="column-todo">
                                <% tasksGrouped.todo.forEach(task => { %>
                                <div class="task-card" data-task-id="<%= task.id %>" draggable="true">
                                    <div class="task-header">
                                        <span class="priority-indicator priority-<%= task.prioridad %>"></span>
                                        <div class="task-actions">
                                            <button onclick="editTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button onclick="deleteTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <h4 class="task-title"><%= task.titulo %></h4>
                                    <% if (task.descripcion) { %>
                                    <p class="task-description"><%= task.descripcion.substring(0, 80) %>...</p>
                                    <% } %>
                                    <div class="task-footer">
                                        <% if (task.asignado_nombres) { %>
                                        <div class="task-assignee">
                                            <div class="assignee-avatar">
                                                <%= task.asignado_nombres.charAt(0).toUpperCase() %>
                                            </div>
                                            <span><%= task.asignado_nombres %></span>
                                        </div>
                                        <% } %>
                                        <% if (task.fecha_limite) { %>
                                        <div class="task-due-date">
                                            <i class="fas fa-calendar"></i>
                                            <%= new Date(task.fecha_limite).toLocaleDateString('es-ES') %>
                                        </div>
                                        <% } %>
                                    </div>
                                </div>
                                <% }); %>
                            </div>
                        </div>

                        <!-- Columna: En Progreso -->
                        <div class="kanban-column" data-status="in_progress">
                            <div class="column-header">
                                <div class="column-title">
                                    <i class="fas fa-play"></i>
                                    <span>En Progreso</span>
                                </div>
                                <div class="column-count">
                                    <%= tasksGrouped.in_progress.length %>
                                </div>
                            </div>
                            <div class="column-content" id="column-in_progress">
                                <% tasksGrouped.in_progress.forEach(task => { %>
                                <div class="task-card" data-task-id="<%= task.id %>" draggable="true">
                                    <div class="task-header">
                                        <span class="priority-indicator priority-<%= task.prioridad %>"></span>
                                        <div class="task-actions">
                                            <button onclick="editTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button onclick="deleteTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <h4 class="task-title"><%= task.titulo %></h4>
                                    <% if (task.descripcion) { %>
                                    <p class="task-description"><%= task.descripcion.substring(0, 80) %>...</p>
                                    <% } %>
                                    <div class="task-footer">
                                        <% if (task.asignado_nombres) { %>
                                        <div class="task-assignee">
                                            <div class="assignee-avatar">
                                                <%= task.asignado_nombres.charAt(0).toUpperCase() %>
                                            </div>
                                            <span><%= task.asignado_nombres %></span>
                                        </div>
                                        <% } %>
                                        <% if (task.fecha_limite) { %>
                                        <div class="task-due-date">
                                            <i class="fas fa-calendar"></i>
                                            <%= new Date(task.fecha_limite).toLocaleDateString('es-ES') %>
                                        </div>
                                        <% } %>
                                    </div>
                                </div>
                                <% }); %>
                            </div>
                        </div>

                        <!-- Columna: Completadas -->
                        <div class="kanban-column" data-status="done">
                            <div class="column-header">
                                <div class="column-title">
                                    <i class="fas fa-check"></i>
                                    <span>Completadas</span>
                                </div>
                                <div class="column-count">
                                    <%= tasksGrouped.done.length %>
                                </div>
                            </div>
                            <div class="column-content" id="column-done">
                                <% tasksGrouped.done.forEach(task => { %>
                                <div class="task-card completed" data-task-id="<%= task.id %>" draggable="true">
                                    <div class="task-header">
                                        <span class="priority-indicator priority-<%= task.prioridad %>"></span>
                                        <div class="task-actions">
                                            <button onclick="editTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button onclick="deleteTask(<%= task.id %>)" class="task-action-btn">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <h4 class="task-title"><%= task.titulo %></h4>
                                    <% if (task.descripcion) { %>
                                    <p class="task-description"><%= task.descripcion.substring(0, 80) %>...</p>
                                    <% } %>
                                    <div class="task-footer">
                                        <% if (task.asignado_nombres) { %>
                                        <div class="task-assignee">
                                            <div class="assignee-avatar">
                                                <%= task.asignado_nombres.charAt(0).toUpperCase() %>
                                            </div>
                                            <span><%= task.asignado_nombres %></span>
                                        </div>
                                        <% } %>
                                        <% if (task.fecha_limite) { %>
                                        <div class="task-due-date">
                                            <i class="fas fa-calendar"></i>
                                            <%= new Date(task.fecha_limite).toLocaleDateString('es-ES') %>
                                        </div>
                                        <% } %>
                                    </div>
                                </div>
                                <% }); %>
                            </div>
                        </div>
                    </div>

                    <!-- Mensaje cuando no hay tareas -->
                    <% if (tasks.length === 0) { %>
                    <div class="empty-kanban">
                        <div class="empty-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <h3>No hay tareas en este proyecto</h3>
                        <p>Comienza creando tu primera tarea para organizar el trabajo del equipo.</p>
                        <button onclick="openTaskModal()" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Crear Primera Tarea
                        </button>
                    </div>
                    <% } %>
                </div>

                <!-- Pesta√±a de Timeline -->
                <div id="timeline" class="tab-pane">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3><i class="fas fa-clock"></i> Timeline del Proyecto</h3>
                        <div class="timeline-filters">
                            <select id="timelineFilter" class="form-select" style="width: auto;" onchange="filterTimeline()">
                                <option value="all">Todas las actividades</option>
                                <option value="tasks">Solo tareas</option>
                                <option value="members">Solo miembros</option>
                                <option value="project">Solo proyecto</option>
                            </select>
                        </div>
                    </div>

                    <!-- Timeline Container -->
                    <div class="timeline-container">
                        <div class="timeline-line"></div>
                        
                        <!-- Evento: Creaci√≥n del proyecto -->
                        <div class="timeline-event" data-type="project">
                            <div class="timeline-marker project-marker">
                                <i class="fas fa-flag"></i>
                            </div>
                            <div class="timeline-content-card">
                                <div class="timeline-header">
                                    <h4>Proyecto Creado</h4>
                                    <span class="timeline-date"><%= new Date(project.fecha_creacion).toLocaleDateString('es-ES') %></span>
                                </div>
                                <p>El proyecto "<%= project.nombre %>" fue creado por <%= project.director_nombres %> <%= project.director_apellidos %>.</p>
                                <div class="timeline-meta">
                                    <span class="timeline-tag project-tag">Proyecto</span>
                                </div>
                            </div>
                        </div>

                        <!-- Eventos de miembros -->
                        <% members.forEach((member, index) => { %>
                        <div class="timeline-event" data-type="members">
                            <div class="timeline-marker member-marker">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <div class="timeline-content-card">
                                <div class="timeline-header">
                                    <h4>Miembro Agregado</h4>
                                    <span class="timeline-date"><%= new Date(member.fecha_union || project.fecha_creacion).toLocaleDateString('es-ES') %></span>
                                </div>
                                <p><%= member.nombres %> <%= member.apellidos %> se uni√≥ al proyecto como <%= member.rol %>.</p>
                                <div class="timeline-meta">
                                    <span class="timeline-tag member-tag">Miembro</span>
                                    <span class="timeline-role"><%= member.rol %></span>
                                </div>
                            </div>
                        </div>
                        <% }); %>

                        <!-- Eventos de tareas -->
                        <% if (tasks && tasks.length > 0) { %>
                            <% tasks.forEach(task => { %>
                            <div class="timeline-event" data-type="tasks">
                                <div class="timeline-marker task-marker task-<%= task.estado %>">
                                    <i class="fas fa-<%= task.estado === 'done' ? 'check' : task.estado === 'in-progress' ? 'play' : 'circle' %>"></i>
                                </div>
                                <div class="timeline-content-card">
                                    <div class="timeline-header">
                                        <h4><%= task.estado === 'done' ? 'Tarea Completada' : 'Tarea Creada' %></h4>
                                        <span class="timeline-date"><%= new Date(task.fecha_creacion).toLocaleDateString('es-ES') %></span>
                                    </div>
                                    <p><strong><%= task.titulo %></strong></p>
                                    <% if (task.descripcion) { %>
                                    <p class="timeline-description"><%= task.descripcion.substring(0, 100) %>...</p>
                                    <% } %>
                                    <div class="timeline-meta">
                                        <span class="timeline-tag task-tag">Tarea</span>
                                        <span class="priority-badge priority-<%= task.prioridad %>"><%= task.prioridad %></span>
                                        <% if (task.asignado_a) { %>
                                        <span class="timeline-assignee">Asignada a: <%= task.asignado_nombres %></span>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                        <% } %>

                        <!-- Evento: Estado actual -->
                        <div class="timeline-event current-event" data-type="project">
                            <div class="timeline-marker current-marker">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="timeline-content-card current-card">
                                <div class="timeline-header">
                                    <h4>Estado Actual</h4>
                                    <span class="timeline-date">Ahora</span>
                                </div>
                                <p>El proyecto est√° en progreso con <%= tasks ? tasks.filter(t => 
                            t.estado === 'completado' || 
                            t.estado === 'aprobado' || 
                            t.estado === 'revisado' ||
                            t.estado === 'completada'
                        ).length : 0 %> de <%= tasks ? tasks.length : 0 %> tareas completadas.</p>
                                <div class="timeline-meta">
                                    <span class="timeline-tag current-tag">Actual</span>
                                    <div class="current-progress">
                                        <div class="progress-mini">
                                            <div class="progress-mini-fill" style="width: <%= progress %>%"></div>
                                        </div>
                                        <span><%= progress %>% completado</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Evento futuro: Fecha l√≠mite -->
                        <% if (project.fecha_limite) { %>
                        <div class="timeline-event future-event" data-type="project">
                            <div class="timeline-marker deadline-marker">
                                <i class="fas fa-flag-checkered"></i>
                            </div>
                            <div class="timeline-content-card future-card">
                                <div class="timeline-header">
                                    <h4>Fecha L√≠mite</h4>
                                    <span class="timeline-date"><%= new Date(project.fecha_limite).toLocaleDateString('es-ES') %></span>
                                </div>
                                <p>Fecha l√≠mite para la finalizaci√≥n del proyecto.</p>
                                <div class="timeline-meta">
                                    <span class="timeline-tag deadline-tag">Fecha L√≠mite</span>
                                    <span class="days-remaining">
                                        <% 
                                        const daysLeft = Math.ceil((new Date(project.fecha_limite) - new Date()) / (1000 * 60 * 60 * 24));
                                        %>
                                        <% if (daysLeft > 0) { %>
                                            <%= daysLeft %> d√≠as restantes
                                        <% } else if (daysLeft === 0) { %>
                                            ¬°Hoy es la fecha l√≠mite!
                                        <% } else { %>
                                            <%= Math.abs(daysLeft) %> d√≠as de retraso
                                        <% } %>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <% } %>
                    </div>
                </div>

                <!-- Pesta√±a de Invitaciones -->
                <div id="invitations" class="tab-pane">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3><i class="fas fa-user-plus"></i> Gesti√≥n de Invitaciones</h3>
                        <button class="btn btn-primary" id="sendInvitationBtn">
                            <i class="fas fa-paper-plane"></i> Enviar Invitaci√≥n
                        </button>
                    </div>

                    <!-- Estad√≠sticas de Invitaciones -->
                    <div style="background: rgba(255, 255, 255, 0.95); border-radius: 15px; padding: 25px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); backdrop-filter: blur(10px); margin-bottom: 20px;">
                        <h4 style="margin-bottom: 15px; color: #2c3e50;">Estad√≠sticas de Invitaciones</h4>
                        <div id="invitationStats">
                            <!-- Las estad√≠sticas se cargar√°n din√°micamente -->
                        </div>
                    </div>

                    <!-- Tabla de Invitaciones -->
                    <div style="background: rgba(255, 255, 255, 0.95); border-radius: 15px; padding: 25px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); backdrop-filter: blur(10px);">
                        <h4 style="margin-bottom: 15px; color: #2c3e50;">Invitaciones Activas</h4>
                        <div style="overflow-x: auto;">
                            <table class="modern-table" id="invitationsTable">
                                <thead>
                                    <tr>
                                        <th>Usuario/Email</th>
                                        <th>Estado</th>
                                        <th>Fecha Env√≠o</th>
                                        <th>Fecha Expiraci√≥n</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Las invitaciones se cargar√°n din√°micamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Pesta√±a de Actividad -->
                <div id="activity" class="tab-pane">
                    <h3><i class="fas fa-history"></i> Actividad Reciente</h3>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        El registro de actividad estar√° disponible pr√≥ximamente.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include shared modal -->
    <%- include('../shared/modals/confirm-modal') %>

    <!-- Modal de Detalles de Tarea -->
    <div class="modal fade" id="taskDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-tasks"></i> Detalles de la Tarea
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="taskDetailsBody">
                    <!-- El contenido se cargar√° din√°micamente -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Gesti√≥n de pesta√±as
        function showTab(tabName) {
            // Ocultar todas las pesta√±as
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            
            // Desactivar todos los botones
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Mostrar la pesta√±a seleccionada
            document.getElementById(tabName).classList.add('active');
            
            // Activar el bot√≥n correspondiente
            event.target.classList.add('active');
        }

        // Funciones de utilidad
        function showAlert(message, type = 'info') {
            // Crear alerta temporal
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : type === 'warning' ? 'exclamation-circle' : 'info-circle'}"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remover despu√©s de 5 segundos
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                if (alerts.length > 0) {
                    alerts[alerts.length - 1].remove();
                }
            }, 5000);
        }

        // Funci√≥n para eliminar tareas
        function deleteTask(taskId) {
            showConfirmDialog(
                '¬øEliminar tarea?',
                'Esta acci√≥n no se puede deshacer. ¬øEst√°s seguro de que deseas eliminar esta tarea?',
                async () => {
                    try {
                        const response = await fetch(`/admin/api/tasks/${taskId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showAlert('Tarea eliminada exitosamente', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showAlert(result.error || 'Error al eliminar la tarea', 'danger');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showAlert('Error al eliminar la tarea', 'danger');
                    }
                }
            );
        }

        // Funciones de confirmaci√≥n
        function showConfirmDialog(title, message, callback) {
            // Configurar el modal con los par√°metros
            const modal = document.getElementById('confirmModal');
            modal.querySelector('.modal-header h3').textContent = title;
            modal.querySelector('.modal-body p').textContent = message;
            
            // Mostrar el modal con la funci√≥n callback
            showConfirmModal(callback);
        }

        // Funciones de gesti√≥n de proyecto
        function completeProject(projectId) {
            fetch(`/admin/projects/${projectId}/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error al completar el proyecto: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al completar el proyecto');
            });
        }

        function deleteProject(projectId) {
            fetch(`/admin/projects/${projectId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/admin/projects';
                } else {
                    alert('Error al eliminar el proyecto: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al eliminar el proyecto');
            });
        }

        // Sistema de Invitaciones
        class InvitationManager {
            constructor(projectId) {
                this.projectId = projectId;
                this.initializeEventListeners();
                this.loadInvitations();
            }

            initializeEventListeners() {
                // Bot√≥n Invitar Miembros
                document.getElementById('inviteMembersBtn')?.addEventListener('click', () => {
                    this.showInvitationModal();
                });

                // Bot√≥n Agregar Miembro
                document.getElementById('addMemberBtn')?.addEventListener('click', () => {
                    this.showInvitationModal();
                });

                // Bot√≥n Enviar Invitaci√≥n
                document.getElementById('sendInvitationBtn')?.addEventListener('click', () => {
                    this.showInvitationModal();
                });

                // Bot√≥n Generar C√≥digo
                document.getElementById('generateCodeBtn')?.addEventListener('click', () => {
                    this.generateQuickCode();
                });

                // Formulario de invitaci√≥n
                document.getElementById('invitationForm')?.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.sendInvitation();
                });

                // Event listener para el formulario de invitaci√≥n por email
                document.addEventListener('submit', (e) => {
                    if (e.target.id === 'emailInvitationForm') {
                        e.preventDefault();
                        this.sendEmailInvitation();
                    }
                });
            }

            showInvitationModal() {
                const modalHtml = `
                    <div class="modal fade" id="invitationModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Invitar Miembros al Proyecto</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <!-- Pesta√±as de navegaci√≥n -->
                                    <ul class="nav nav-tabs mb-4" id="invitationTabs" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="email-tab" data-bs-toggle="tab" data-bs-target="#email-invitation" type="button" role="tab">
                                                <i class="fas fa-envelope"></i> Invitaci√≥n por Email
                                            </button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="code-tab" data-bs-toggle="tab" data-bs-target="#code-invitation" type="button" role="tab">
                                                <i class="fas fa-code"></i> Generar C√≥digo
                                            </button>
                                        </li>
                                    </ul>

                                    <!-- Contenido de las pesta√±as -->
                                    <div class="tab-content" id="invitationTabContent">
                                        <!-- Pesta√±a de Invitaci√≥n por Email -->
                                        <div class="tab-pane fade show active" id="email-invitation" role="tabpanel">
                                            <div class="text-center mb-4">
                                                <h6 class="mb-3">Enviar Invitaci√≥n por Correo Electr√≥nico</h6>
                                                <p class="text-muted">Env√≠a una invitaci√≥n directa al email del estudiante</p>
                                            </div>
                                            
                                            <form id="emailInvitationForm" method="post">
                                                <div class="mb-3">
                                                    <label for="invitationEmail" class="form-label">Email del estudiante *</label>
                                                    <input type="email" class="form-control" id="invitationEmail" placeholder="estudiante@ejemplo.com" required>
                                                    <small class="text-muted">El estudiante recibir√° un enlace √∫nico para unirse al proyecto</small>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="invitationMessage" class="form-label">Mensaje personalizado (opcional)</label>
                                                    <textarea class="form-control" id="invitationMessage" rows="3" placeholder="Escribe un mensaje personal para el estudiante..."></textarea>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="invitationExpiry" class="form-label">Expira en (d√≠as)</label>
                                                    <select class="form-select" id="invitationExpiry">
                                                        <option value="3">3 d√≠as</option>
                                                        <option value="7" selected>7 d√≠as</option>
                                                        <option value="14">14 d√≠as</option>
                                                        <option value="30">30 d√≠as</option>
                                                    </select>
                                                </div>
                                                
                                                <div class="d-grid">
                                                    <button type="submit" class="btn btn-primary btn-lg">
                                                        <i class="fas fa-paper-plane"></i> Enviar Invitaci√≥n
                                                    </button>
                                                </div>
                                            </form>
                                            
                                            <div id="emailInvitationResult" class="mt-4" style="display: none;">
                                                <div class="alert alert-success">
                                                    <h6><strong>¬°Invitaci√≥n enviada exitosamente!</strong></h6>
                                                    <p class="mb-0">El estudiante recibir√° un email con las instrucciones para unirse al proyecto.</p>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Pesta√±a de C√≥digo de Invitaci√≥n -->
                                        <div class="tab-pane fade" id="code-invitation" role="tabpanel">
                                            <div class="text-center">
                                                <h6 class="mb-3">Generar C√≥digo de Invitaci√≥n</h6>
                                                <p class="text-muted mb-4">Genera un c√≥digo que las personas pueden usar para unirse al proyecto</p>
                                                
                                                <div class="mb-3">
                                                    <label class="form-label">M√°ximo de usos:</label>
                                                    <input type="number" class="form-control" id="maxUses" value="1" min="1" max="10">
                                                    <small class="text-muted">N√∫mero de personas que pueden usar este c√≥digo</small>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label class="form-label">Expira en (d√≠as):</label>
                                                    <input type="number" class="form-control" id="expiresInDays" value="7" min="1" max="30">
                                                </div>
                                                
                                                <button type="button" class="btn btn-success btn-lg" onclick="invitationManager.generateQuickCode()">
                                                    <i class="fas fa-code"></i> Generar C√≥digo
                                                </button>
                                                
                                                <div id="generatedCodeResult" class="mt-4" style="display: none;">
                                                    <div class="alert alert-success">
                                                        <h6><strong>¬°C√≥digo generado exitosamente!</strong></h6>
                                                        <div class="input-group mt-3">
                                                            <input type="text" class="form-control form-control-lg text-center fw-bold" id="generatedCode" readonly>
                                                            <button class="btn btn-outline-secondary" onclick="invitationManager.copyCode()">
                                                                <i class="fas fa-copy"></i> Copiar
                                                            </button>
                                                        </div>
                                                        <div class="mt-3">
                                                            <small class="text-muted">Comparte este c√≥digo con las personas que quieres invitar</small><br>
                                                    <small class="text-muted">Expira en <span id="expirationInfo"></span> d√≠as</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Remover modal existente si existe
                document.getElementById('invitationModal')?.remove();
                
                // Agregar nuevo modal
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Mostrar modal
                const modal = new bootstrap.Modal(document.getElementById('invitationModal'));
                modal.show();
            }

            async sendInvitation() {
                const email = document.getElementById('invitationEmail').value;
                const mensaje = document.getElementById('invitationMessage').value;

                try {
                    const response = await fetch(`/projects/${this.projectId}/invitations`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email, mensaje })
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showAlert('Invitaci√≥n enviada exitosamente', 'success');
                        bootstrap.Modal.getInstance(document.getElementById('invitationModal')).hide();
                        this.loadInvitations();
                    } else {
                        this.showAlert(result.error || 'Error al enviar invitaci√≥n', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Error de conexi√≥n', 'danger');
                }
            }

            async sendEmailInvitation() {
                try {
                    const email = document.getElementById('invitationEmail').value.trim();
                    const message = document.getElementById('invitationMessage').value.trim();
                    const expiryDays = document.getElementById('invitationExpiry').value;

                    if (!email) {
                        this.showAlert('Por favor ingresa un email v√°lido', 'warning');
                        return;
                    }

                    // Mostrar indicador de carga
                    const submitBtn = document.querySelector('#emailInvitationForm button[type="submit"]');
                    const originalText = submitBtn.innerHTML;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
                    submitBtn.disabled = true;

                    const response = await fetch(`/projects/${this.projectId}/invitations/email`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            email, 
                            message,
                            expires_in_days: parseInt(expiryDays)
                        })
                    });

                    const result = await response.json();

                    // Restaurar bot√≥n
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;

                    if (result.success) {
                        // Mostrar mensaje de √©xito
                        document.getElementById('emailInvitationResult').style.display = 'block';
                        
                        // Limpiar formulario
                        document.getElementById('emailInvitationForm').reset();
                        
                        // Recargar invitaciones
                        this.loadInvitations();
                        
                        // Cerrar modal despu√©s de 2 segundos
                        setTimeout(() => {
                            bootstrap.Modal.getInstance(document.getElementById('invitationModal')).hide();
                        }, 2000);
                    } else {
                        this.showAlert(result.error || 'Error al enviar invitaci√≥n por email', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Error de conexi√≥n al enviar invitaci√≥n', 'danger');
                    
                    // Restaurar bot√≥n en caso de error
                    const submitBtn = document.querySelector('#emailInvitationForm button[type="submit"]');
                    submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Enviar Invitaci√≥n';
                    submitBtn.disabled = false;
                }
            }

            async generateQuickCode() {
                try {
                    const maxUses = document.getElementById('maxUses')?.value || 1;
                    const expiresInDays = document.getElementById('expiresInDays')?.value || 7;
                    
                    const response = await fetch(`/projects/${this.projectId}/invitations/quick`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            max_uses: parseInt(maxUses),
                            expires_in_days: parseInt(expiresInDays)
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        document.getElementById('generatedCode').value = data.codigo;
                        document.getElementById('expirationInfo').textContent = expiresInDays;
                        document.getElementById('generatedCodeResult').style.display = 'block';
                        
                        // Mostrar notificaci√≥n de √©xito
                        this.showNotification('C√≥digo generado exitosamente', 'success');
                    } else {
                        this.showNotification('Error al generar c√≥digo: ' + (data.error || 'Error desconocido'), 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showNotification('Error al generar c√≥digo de invitaci√≥n', 'error');
                }
            }

            copyCode() {
                const codeInput = document.getElementById('generatedCode');
                codeInput.select();
                document.execCommand('copy');
                this.showAlert('C√≥digo copiado al portapapeles', 'info');
            }

            async loadInvitations() {
                try {
                    const response = await fetch(`/projects/${this.projectId}/invitations`);
                    const result = await response.json();

                    if (result.success) {
                        this.updateInvitationsTable(result.invitations);
                        this.updateInvitationStats(result.stats);
                    }
                } catch (error) {
                    console.error('Error loading invitations:', error);
                }
            }

            updateInvitationsTable(invitations) {
                const tableBody = document.querySelector('#invitationsTable tbody');
                if (!tableBody) return;

                if (invitations.length === 0) {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center text-muted">
                                <i class="fas fa-inbox"></i>
                                <p class="mt-2">No hay invitaciones pendientes</p>
                            </td>
                        </tr>
                    `;
                    return;
                }
                tableBody.innerHTML = invitations.map(invitation => `
                    <tr>
                        <td>
                            ${invitation.invitado_email || invitation.invitado_nombre || 'C√≥digo general'}
                        </td>
                        <td>
                            <span class="badge bg-${this.getStatusColor(invitation.estado)}">
                                ${this.getStatusText(invitation.estado)}
                            </span>
                        </td>
                        <td>${new Date(invitation.created_at).toLocaleDateString()}</td>
                        <td>${new Date(invitation.fecha_expiracion).toLocaleDateString()}</td>
                        <td>
                            ${invitation.estado === 'pendiente' ? `
                                <button class="btn btn-sm btn-outline-danger" onclick="invitationManager.cancelInvitation(${invitation.id})">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            ` : ''}
                        </td>
                    </tr>
                `).join('');
            }

            updateInvitationStats(stats) {
                const statsContainer = document.getElementById('invitationStats');
                if (!statsContainer) return;

                statsContainer.innerHTML = `
                    <div class="row text-center">
                        <div class="col-3">
                            <div class="stat-item">
                                <div class="stat-number">${stats.total}</div>
                                <div class="stat-label">Total</div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="stat-item">
                                <div class="stat-number text-warning">${stats.pendientes}</div>
                                <div class="stat-label">Pendientes</div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="stat-item">
                                <div class="stat-number text-success">${stats.aceptadas}</div>
                                <div class="stat-label">Aceptadas</div>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="stat-item">
                                <div class="stat-number text-danger">${stats.rechazadas}</div>
                                <div class="stat-label">Rechazadas</div>
                            </div>
                        </div>
                    </div>
                `;
            }

            getStatusColor(status) {
                const colors = {
                    'pendiente': 'warning',
                    'aceptada': 'success',
                    'rechazada': 'danger',
                    'expirada': 'secondary'
                };
                return colors[status] || 'secondary';
            }

            getStatusText(status) {
                const texts = {
                    'pendiente': 'Pendiente',
                    'aceptada': 'Aceptada',
                    'rechazada': 'Rechazada',
                    'expirada': 'Expirada'
                };
                return texts[status] || status;
            }

            async cancelInvitation(invitationId) {
                if (!confirm('¬øEst√°s seguro de que quieres cancelar esta invitaci√≥n?')) {
                    return;
                }

                try {
                    const url = `/projects/${this.projectId}/invitations/${invitationId}`;
                    
                    const response = await fetch(url, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showAlert('Invitaci√≥n cancelada', 'success');
                        this.loadInvitations();
                    } else {
                        this.showAlert(result.error || 'Error al cancelar invitaci√≥n', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    this.showAlert('Error de conexi√≥n', 'danger');
                }
            }

            showAlert(message, type) {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                
                const container = document.querySelector('.container-fluid') || document.body;
                container.insertAdjacentHTML('afterbegin', alertHtml);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    const alert = container.querySelector('.alert');
                    if (alert) {
                        bootstrap.Alert.getOrCreateInstance(alert).close();
                    }
                }, 5000);
            }
        }

        // Inicializar el gestor de invitaciones
        let invitationManager;
        document.addEventListener('DOMContentLoaded', function() {
            const projectId = '<%= project.id %>';
            invitationManager = new InvitationManager(projectId);
            
            // Configurar barra de progreso
            const progressBar = document.querySelector('.progress-bar');
            if (progressBar) {
                const progress = progressBar.getAttribute('data-progress');
                progressBar.style.width = progress + '%';
            }

            // Configurar color de d√≠as restantes
            const daysLeftElement = document.querySelector('.days-left');
            if (daysLeftElement) {
                const days = parseInt(daysLeftElement.getAttribute('data-days'));
                let color = '#dc3545'; // rojo por defecto (vencido)
                if (days > 7) color = '#28a745'; // verde
                else if (days > 0) color = '#ffc107'; // amarillo
                daysLeftElement.style.color = color;
            }
        });

        // Funciones de gesti√≥n de miembros
        function showInviteModal() {
            if (invitationManager) {
                invitationManager.showInvitationModal();
            } else {
                alert('Sistema de invitaciones no disponible');
            }
        }

        async function editMemberRole(userId) {
            try {
                // Obtener roles disponibles
                const rolesResponse = await fetch('/admin/roles');
                const rolesResult = await rolesResponse.json();
                
                if (!rolesResult.success) {
                    showAlert('Error al cargar roles disponibles', 'danger');
                    return;
                }
                
                const roles = rolesResult.roles || [];
                const roleOptions = roles.map(role => 
                    `<option value="${role.id}">${role.nombre}</option>`
                ).join('');
                
                const modalHtml = `
                    <div class="modal fade" id="editRoleModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-user-edit"></i>
                                        Cambiar Rol del Miembro
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <label class="form-label">Nuevo Rol</label>
                                        <select class="form-control" id="newMemberRole">
                                            ${roleOptions}
                                        </select>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="button" class="btn btn-primary" onclick="saveMemberRole(${userId})">
                                        <i class="fas fa-save"></i> Guardar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Remover modal existente si existe
                const existingModal = document.getElementById('editRoleModal');
                if (existingModal) {
                    existingModal.remove();
                }
                
                // Agregar modal al DOM
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Mostrar modal
                const modal = new bootstrap.Modal(document.getElementById('editRoleModal'));
                modal.show();
                
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al cargar el formulario de edici√≥n', 'danger');
            }
        }

        async function saveMemberRole(userId) {
            try {
                const newRoleId = document.getElementById('newMemberRole').value;
                
                if (!newRoleId) {
                    showAlert('Debe seleccionar un rol', 'warning');
                    return;
                }
                
                const response = await fetch(`/admin/projects/<%= project.id %>/members/${userId}/role`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ role_id: newRoleId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Rol actualizado exitosamente', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editRoleModal')).hide();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error || 'Error al cambiar el rol', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al cambiar el rol', 'danger');
            }
        }

        function removeMember(userId) {
            showConfirmDialog(
                '¬øRemover miembro?',
                'Esta acci√≥n remover√° al usuario del proyecto. ¬øEst√°s seguro?',
                async () => {
                    try {
                        const response = await fetch(`/admin/projects/<%= project.id %>/members/${userId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showAlert('Miembro removido exitosamente', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showAlert(result.error || 'Error al remover miembro', 'danger');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showAlert('Error al remover miembro', 'danger');
                    }
                }
            );
        }

        // Funciones de gesti√≥n de tareas
        function createTask() {
            openTaskModal();
        }

        function editTask(taskId) {
            // Abrir modal de edici√≥n de tarea con datos precargados
            openTaskModal(taskId);
        }

        async function openTaskModal(taskId = null) {
            try {
                let taskData = null;
                
                if (taskId) {
                    // Cargar datos de la tarea existente
                    const response = await fetch(`/admin/api/tasks/${taskId}/details`);
                    const result = await response.json();
                    
                    if (result.success) {
                        taskData = result.task;
                    } else {
                        showAlert('Error al cargar los datos de la tarea', 'danger');
                        return;
                    }
                }
                
                // Crear modal din√°micamente
                const modalHtml = `
                    <div class="modal fade" id="taskModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-tasks"></i>
                                        ${taskId ? 'Editar Tarea' : 'Nueva Tarea'}
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="taskForm">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <div class="form-group">
                                                    <label class="form-label">T√≠tulo *</label>
                                                    <input type="text" class="form-control" id="taskTitle" 
                                                           value="${taskData ? taskData.titulo : ''}" required>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label class="form-label">Prioridad</label>
                                                    <select class="form-control" id="taskPriority">
                                                        <option value="baja" ${taskData && taskData.prioridad === 'baja' ? 'selected' : ''}>Baja</option>
                                                        <option value="media" ${taskData && taskData.prioridad === 'media' ? 'selected' : ''}>Media</option>
                                                        <option value="alta" ${taskData && taskData.prioridad === 'alta' ? 'selected' : ''}>Alta</option>
                                                        <option value="critica" ${taskData && taskData.prioridad === 'critica' ? 'selected' : ''}>Cr√≠tica</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="form-group">
                                            <label class="form-label">Descripci√≥n</label>
                                            <textarea class="form-control" id="taskDescription" rows="3">${taskData ? taskData.descripcion || '' : ''}</textarea>
                                        </div>
                                        
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="form-label">Asignar a</label>
                                                    <select class="form-control" id="taskAssignee">
                                                        <option value="">Sin asignar</option>
                                                        <% if (members && members.length > 0) { %>
                                                            <% members.forEach(member => { %>
                                                                <option value="<%= member.usuario_id %>" 
                                                                        ${taskData && taskData.asignado_a == <%= member.usuario_id %> ? 'selected' : ''}>
                                                                    <%= member.nombres %> <%= member.apellidos %>
                                                                </option>
                                                            <% }); %>
                                                        <% } %>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="form-label">Fecha L√≠mite</label>
                                                    <input type="date" class="form-control" id="taskDueDate" 
                                                           value="${taskData && taskData.fecha_limite ? new Date(taskData.fecha_limite).toISOString().split('T')[0] : ''}">
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="form-label">Estado</label>
                                                    <select class="form-control" id="taskStatus">
                                                        <option value="pendiente" ${taskData && taskData.estado === 'pendiente' ? 'selected' : ''}>Pendiente</option>
                                                        <option value="en progreso" ${taskData && taskData.estado === 'en progreso' ? 'selected' : ''}>En Progreso</option>
                                                        <option value="en revision" ${taskData && taskData.estado === 'en revision' ? 'selected' : ''}>En Revisi√≥n</option>
                                                        <option value="completada" ${taskData && taskData.estado === 'completada' ? 'selected' : ''}>Completada</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="form-label">Workflow Status</label>
                                                    <select class="form-control" id="taskWorkflowStatus">
                                                        <option value="todo" ${taskData && taskData.workflow_status === 'todo' ? 'selected' : ''}>To Do</option>
                                                        <option value="in_progress" ${taskData && taskData.workflow_status === 'in_progress' ? 'selected' : ''}>In Progress</option>
                                                        <option value="review" ${taskData && taskData.workflow_status === 'review' ? 'selected' : ''}>Review</option>
                                                        <option value="done" ${taskData && taskData.workflow_status === 'done' ? 'selected' : ''}>Done</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="button" class="btn btn-primary" onclick="saveTask(${taskId})">
                                        <i class="fas fa-save"></i> ${taskId ? 'Actualizar' : 'Crear'} Tarea
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Remover modal existente si existe
                const existingModal = document.getElementById('taskModal');
                if (existingModal) {
                    existingModal.remove();
                }
                
                // Agregar modal al DOM
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Mostrar modal
                const modal = new bootstrap.Modal(document.getElementById('taskModal'));
                modal.show();
                
            } catch (error) {
                console.error('Error opening task modal:', error);
                showAlert('Error al abrir el modal de tarea', 'danger');
            }
        }

        async function saveTask(taskId = null) {
            try {
                const formData = {
                    titulo: document.getElementById('taskTitle').value,
                    descripcion: document.getElementById('taskDescription').value,
                    prioridad: document.getElementById('taskPriority').value,
                    asignado_a: document.getElementById('taskAssignee').value || null,
                    fecha_limite: document.getElementById('taskDueDate').value || null,
                    estado: document.getElementById('taskStatus').value,
                    workflow_status: document.getElementById('taskWorkflowStatus').value
                };
                
                if (!formData.titulo.trim()) {
                    showAlert('El t√≠tulo es requerido', 'warning');
                    return;
                }
                
                const url = taskId ? `/api/tasks/${taskId}` : `/admin/projects/<%= project.id %>/tasks`;
                const method = taskId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert(taskId ? 'Tarea actualizada exitosamente' : 'Tarea creada exitosamente', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('taskModal')).hide();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error || 'Error al guardar la tarea', 'danger');
                }
                
            } catch (error) {
                console.error('Error saving task:', error);
                showAlert('Error al guardar la tarea', 'danger');
            }
        }



        function viewTaskKanban() {
            window.location.href = `/admin/projects/<%= project.id %>/tasks/kanban`;
        }

        // Funciones de gesti√≥n de invitaciones
        function resendInvitation(invitationId) {
            fetch(`/admin/invitations/${invitationId}/resend`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Invitaci√≥n reenviada exitosamente');
                } else {
                    alert('Error al reenviar invitaci√≥n: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al reenviar invitaci√≥n');
            });
        }



        // Funci√≥n de generaci√≥n de reportes
        function generateReport() {
            window.open(`/admin/projects/<%= project.id %>/report`, '_blank');
        }

        // =============================================
        // INTEGRACI√ìN CON WORKFLOW TIPO JIRA
        // =============================================

        // Actualizar estado de workflow de una tarea
        async function updateTaskWorkflowStatus(taskId, newStatus) {
            try {
                const response = await fetch(`/admin/api/tasks/${taskId}/workflow-status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        status: newStatus 
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert(`Estado actualizado a ${newStatus}`, 'success');
                    // Actualizar la interfaz sin recargar
                    updateTaskStatusInUI(taskId, newStatus);
                } else {
                    showAlert(result.error || 'Error al actualizar estado', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al actualizar estado de la tarea', 'danger');
            }
        }

        // Asignar tarea a usuario
        async function assignTaskToUser(taskId, userId) {
            try {
                const response = await fetch(`/admin/api/tasks/${taskId}/assign`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Tarea asignada correctamente', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error || 'Error al asignar tarea', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al asignar tarea', 'danger');
            }
        }

        // Completar tarea con archivos y descripci√≥n
        async function completeTaskWithDetails(taskId) {
            const modalHtml = `
                <div class="modal fade" id="completeTaskModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="fas fa-check-circle text-success"></i>
                                    Completar Tarea
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="completeTaskForm" enctype="multipart/form-data">
                                    <div class="form-group mb-3">
                                        <label class="form-label">Descripci√≥n del desarrollo</label>
                                        <textarea class="form-control" id="desarrolloDescripcion" rows="4" 
                                                placeholder="Describe c√≥mo completaste esta tarea..."></textarea>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label class="form-label">Archivos adjuntos</label>
                                        <input type="file" class="form-control" id="archivosAdjuntos" multiple>
                                        <small class="form-text text-muted">
                                            Puedes adjuntar m√∫ltiples archivos (im√°genes, documentos, etc.)
                                        </small>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label class="form-label">Horas trabajadas</label>
                                        <input type="number" class="form-control" id="horasTrabajadas" 
                                               min="0" step="0.5" placeholder="Ej: 2.5">
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                <button type="button" class="btn btn-success" onclick="submitCompleteTask(${taskId})">
                                    <i class="fas fa-check"></i> Completar Tarea
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remover modal existente si existe
            const existingModal = document.getElementById('completeTaskModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Agregar modal al DOM
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('completeTaskModal'));
            modal.show();
        }

        // Enviar formulario de completar tarea
        async function submitCompleteTask(taskId) {
            try {
                const formData = new FormData();
                formData.append('desarrollo_descripcion', document.getElementById('desarrolloDescripcion').value);
                formData.append('horas_trabajadas', document.getElementById('horasTrabajadas').value || 0);
                
                // Agregar archivos
                const archivos = document.getElementById('archivosAdjuntos').files;
                for (let i = 0; i < archivos.length; i++) {
                    formData.append('archivos', archivos[i]);
                }
                
                const response = await fetch(`/admin/api/tasks/${taskId}/complete`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Tarea completada exitosamente', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('completeTaskModal')).hide();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(result.error || 'Error al completar tarea', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al completar tarea', 'danger');
            }
        }

        // Agregar comentario a tarea
        async function addTaskComment(taskId) {
            const modalHtml = `
                <div class="modal fade" id="addCommentModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="fas fa-comment"></i>
                                    Agregar Comentario
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addCommentForm" enctype="multipart/form-data">
                                    <div class="form-group mb-3">
                                        <label class="form-label">Comentario</label>
                                        <textarea class="form-control" id="comentarioTexto" rows="3" 
                                                placeholder="Escribe tu comentario..." required></textarea>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label class="form-label">Archivo adjunto (opcional)</label>
                                        <input type="file" class="form-control" id="archivoComentario">
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                                <button type="button" class="btn btn-primary" onclick="submitTaskComment(${taskId})">
                                    <i class="fas fa-paper-plane"></i> Enviar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remover modal existente si existe
            const existingModal = document.getElementById('addCommentModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Agregar modal al DOM
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('addCommentModal'));
            modal.show();
        }

        // Enviar comentario de tarea
        async function submitTaskComment(taskId) {
            try {
                const comentario = document.getElementById('comentarioTexto').value.trim();
                
                if (!comentario) {
                    showAlert('El comentario no puede estar vac√≠o', 'warning');
                    return;
                }
                
                const formData = new FormData();
                formData.append('comentario', comentario);
                
                const archivo = document.getElementById('archivoComentario').files[0];
                if (archivo) {
                    formData.append('archivo', archivo);
                }
                
                const response = await fetch(`/admin/api/tasks/${taskId}/comments`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Comentario agregado exitosamente', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addCommentModal')).hide();
                } else {
                    showAlert(result.error || 'Error al agregar comentario', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error al agregar comentario', 'danger');
            }
        }

        // Actualizar estado de tarea en la interfaz
        function updateTaskStatusInUI(taskId, newStatus) {
            const taskRow = document.querySelector(`tr[data-task-id="${taskId}"]`);
            if (taskRow) {
                const statusCell = taskRow.querySelector('.task-status');
                if (statusCell) {
                    // Actualizar badge de estado
                    let statusClass = 'bg-secondary';
                    let statusText = newStatus;
                    
                    switch(newStatus) {
                        case 'todo':
                            statusClass = 'bg-secondary';
                            statusText = 'Por hacer';
                            break;
                        case 'in_progress':
                            statusClass = 'bg-warning';
                            statusText = 'En progreso';
                            break;
                        case 'done':
                            statusClass = 'bg-success';
                            statusText = 'Completada';
                            break;
                    }
                    
                    statusCell.innerHTML = `<span class="badge ${statusClass}">${statusText}</span>`;
                }
            }
        }

        // =============================================
        // FUNCIONALIDAD DEL TABLERO KANBAN
        // =============================================

        let isKanbanView = false;

        // Alternar entre vista de tabla y Kanban
        function toggleKanbanView() {
            isKanbanView = !isKanbanView;
            const tableView = document.getElementById('tasks-table-view');
            const kanbanView = document.getElementById('tasks-kanban-view');
            const toggleBtn = document.querySelector('.kanban-toggle');
            
            if (isKanbanView) {
                tableView.style.display = 'none';
                kanbanView.style.display = 'block';
                toggleBtn.innerHTML = '<i class="fas fa-list"></i> Vista Lista';
                toggleBtn.classList.add('active');
                loadKanbanTasks();
            } else {
                tableView.style.display = 'block';
                kanbanView.style.display = 'none';
                toggleBtn.innerHTML = '<i class="fas fa-columns"></i> Vista Kanban';
                toggleBtn.classList.remove('active');
            }
        }

        // Cargar tareas en el tablero Kanban
        async function loadKanbanTasks() {
            try {
                const response = await fetch(`/admin/api/projects/<%= project.id %>/tasks`);
                const data = await response.json();
                
                if (data.success) {
                    renderKanbanTasks(data.data);
                } else {
                    console.error('Error al cargar tareas:', data.error);
                    // Usar datos reales del proyecto si est√°n disponibles
                    renderKanbanTasks(getRealProjectTasks());
                }
            } catch (error) {
                console.error('Error:', error);
                // Usar datos reales del proyecto como fallback
                renderKanbanTasks(getRealProjectTasks());
            }
        }

        // Renderizar tareas en el Kanban
        function renderKanbanTasks(tasks) {
            const columns = {
                'todo': document.querySelector('[data-status="todo"] .kanban-tasks'),
                'in_progress': document.querySelector('[data-status="in_progress"] .kanban-tasks'),
                'review': document.querySelector('[data-status="review"] .kanban-tasks'),
                'done': document.querySelector('[data-status="done"] .kanban-tasks')
            };

            // Limpiar columnas
            Object.values(columns).forEach(column => {
                if (column) column.innerHTML = '';
            });

            // Contadores
            const counts = { todo: 0, in_progress: 0, review: 0, done: 0 };

            // Agrupar tareas por estado
            tasks.forEach(task => {
                const status = task.status || 'todo';
                counts[status]++;
                
                if (columns[status]) {
                    const taskElement = createKanbanTaskElement(task);
                    columns[status].appendChild(taskElement);
                }
            });

            // Actualizar contadores
            Object.keys(counts).forEach(status => {
                const countElement = document.querySelector(`[data-status="${status}"] .kanban-count`);
                if (countElement) {
                    countElement.textContent = counts[status];
                }
            });

            // Mostrar mensaje vac√≠o si no hay tareas
            Object.keys(columns).forEach(status => {
                if (columns[status] && counts[status] === 0) {
                    columns[status].innerHTML = '<div class="kanban-empty">No hay tareas en esta columna</div>';
                }
            });
        }

        // Crear elemento de tarea para Kanban
        function createKanbanTaskElement(task) {
            const taskDiv = document.createElement('div');
            taskDiv.className = `kanban-task priority-${task.priority || 'medium'}`;
            taskDiv.draggable = true;
            taskDiv.dataset.taskId = task.id;

            const priorityColor = {
                'high': 'high',
                'medium': 'medium',
                'low': 'low'
            }[task.priority || 'medium'];

            const assigneeInitials = task.assignee ? 
                task.assignee.split(' ').map(n => n[0]).join('').toUpperCase() : 
                'NA';

            const dueDate = task.due_date ? 
                new Date(task.due_date).toLocaleDateString('es-ES', { 
                    day: '2-digit', 
                    month: '2-digit' 
                }) : 
                'Sin fecha';

            taskDiv.innerHTML = `
                <div class="task-priority ${priorityColor}"></div>
                <div class="task-title">${task.title}</div>
                <div class="task-description">${task.description || 'Sin descripci√≥n'}</div>
                <div class="task-meta">
                    <div class="task-assignee">
                        <div class="task-avatar">${assigneeInitials}</div>
                        <span>${task.assignee || 'Sin asignar'}</span>
                    </div>
                    <div class="task-due-date">${dueDate}</div>
                </div>
            `;

            // Agregar eventos de drag and drop
            taskDiv.addEventListener('dragstart', handleDragStart);
            taskDiv.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                const taskId = e.currentTarget.dataset.taskId;
                if (taskId) {
                    showTaskDetailsById(taskId);
                } else {
                    console.error('No se encontr√≥ taskId en el elemento');
                }
            });

            return taskDiv;
        }

        // Manejar inicio de arrastre
        function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', e.target.dataset.taskId);
            e.target.style.opacity = '0.5';
        }

        // Configurar drag and drop para columnas
        function setupKanbanDragAndDrop() {
            const columns = document.querySelectorAll('.kanban-tasks');
            
            columns.forEach(column => {
                column.addEventListener('dragover', handleDragOver);
                column.addEventListener('drop', handleDrop);
                column.addEventListener('dragenter', handleDragEnter);
                column.addEventListener('dragleave', handleDragLeave);
            });
        }

        function handleDragOver(e) {
            e.preventDefault();
        }

        function handleDragEnter(e) {
            e.preventDefault();
            e.currentTarget.style.backgroundColor = 'rgba(102, 126, 234, 0.1)';
        }

        function handleDragLeave(e) {
            e.currentTarget.style.backgroundColor = '';
        }

        async function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.style.backgroundColor = '';
            
            const taskId = e.dataTransfer.getData('text/plain');
            const newStatus = e.currentTarget.closest('.kanban-column').dataset.status;
            const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
            
            if (taskElement) {
                taskElement.style.opacity = '1';
                
                // Actualizar estado en el servidor
                try {
                    await updateTaskWorkflowStatus(taskId, newStatus);
                    
                    // Mover elemento visualmente
                    e.currentTarget.appendChild(taskElement);
                    
                    // Actualizar contadores
                    updateKanbanCounts();
                    
                } catch (error) {
                    console.error('Error al actualizar estado:', error);
                    showAlert('Error al actualizar el estado de la tarea', 'danger');
                }
            }
        }

        // Actualizar contadores del Kanban
        function updateKanbanCounts() {
            const columns = document.querySelectorAll('.kanban-column');
            
            columns.forEach(column => {
                const tasks = column.querySelectorAll('.kanban-task');
                const count = tasks.length;
                const countElement = column.querySelector('.kanban-count');
                
                if (countElement) {
                    countElement.textContent = count;
                }
                
                // Mostrar mensaje vac√≠o si no hay tareas
                const tasksContainer = column.querySelector('.kanban-tasks');
                if (count === 0 && tasksContainer) {
                    tasksContainer.innerHTML = '<div class="kanban-empty">No hay tareas en esta columna</div>';
                }
            });
        }

        // Mostrar detalles de tarea por ID
        async function showTaskDetailsById(taskId) {
            console.log('=== SHOW TASK DETAILS BY ID ===');
            console.log('TaskId received:', taskId);
            
            try {
                // Mostrar loading
                showLoading();
                
                // Obtener detalles completos de la tarea
                console.log('Fetching task details from API...');
                const response = await fetch(`/admin/api/tasks/${taskId}/details`);
                console.log('API Response status:', response.status);
                
                const data = await response.json();
                console.log('API Response data:', data);
                
                hideLoading();
                
                if (data.success) {
                    console.log('Success! Opening modal with data:', data.data);
                    // Mostrar modal con detalles
                    openTaskDetailsModal(data);
                } else {
                    console.error('API returned error:', data.message);
                    showNotification('Error al cargar los detalles de la tarea: ' + (data.message || 'Error desconocido'), 'error');
                }
            } catch (error) {
                hideLoading();
                console.error('Error al cargar detalles de tarea:', error);
                showNotification('Error de conexi√≥n al cargar los detalles', 'error');
            }
        }

        // Mostrar detalles de tarea (funci√≥n legacy para compatibilidad)
        async function showTaskDetails(task) {
            if (!task || !task.id) {
                console.error('Invalid task object:', task);
                showNotification('Error: Datos de tarea inv√°lidos', 'error');
                return;
            }
            await showTaskDetailsById(task.id);
        }

        // Abrir modal con detalles de tarea - Versi√≥n mejorada
        function openTaskDetailsModal(data) {
            console.log('=== MODAL DEBUG START ===');
            console.log('Data received:', data);
            console.log('Data type:', typeof data);
            console.log('Data keys:', data ? Object.keys(data) : 'No data');
            
            // Verificar que tenemos datos
            if (!data) {
                console.error('No data provided to modal');
                alert('Error: No se recibieron datos para mostrar en el modal');
                return;
            }

            // Extraer datos de manera flexible
            let task, comments, history;
            
            if (data.data) {
                // Si los datos vienen en data.data
                task = data.data.task || data.data;
                comments = data.data.comments || [];
                history = data.data.history || [];
            } else {
                // Si los datos vienen directamente
                task = data.task || data;
                comments = data.comments || [];
                history = data.history || [];
            }
            
            console.log('Extracted task:', task);
            console.log('Extracted comments:', comments);
            console.log('Extracted history:', history);

            // Verificar elementos del DOM
            const modalElement = document.getElementById('taskDetailsModal');
            const modalBody = document.getElementById('taskDetailsBody');
            
            console.log('Modal element found:', !!modalElement);
            console.log('Modal body found:', !!modalBody);
            
            if (!modalElement) {
                console.error('Modal element not found');
                alert('Error: No se encontr√≥ el modal en la p√°gina');
                return;
            }
            
            if (!modalBody) {
                console.error('Modal body element not found');
                alert('Error: No se encontr√≥ el contenido del modal');
                return;
            }

            // Verificar que tenemos una tarea v√°lida
            if (!task || (!task.titulo && !task.title)) {
                console.error('Invalid task data:', task);
                alert('Error: Los datos de la tarea no son v√°lidos');
                return;
            }

            // Normalizar nombres de campos para compatibilidad
            const taskTitle = task.titulo || task.title || 'Sin t√≠tulo';
            const taskDescription = task.descripcion || task.description || 'Sin descripci√≥n';
            const taskPriority = task.prioridad || task.priority || 'No definida';
            const taskStatus = task.estado || task.estado_workflow || task.status || 'No definido';
            const taskAssignee = task.asignado_a || task.assignee || task.assigned_to || 'Sin asignar';
            const taskDueDate = task.fecha_vencimiento || task.due_date || task.fecha_limite;
            const taskCreatedDate = task.fecha_creacion || task.created_at || task.fecha_inicio;

            // Funciones auxiliares simples y seguras
            const formatDate = (dateStr) => {
                if (!dateStr) return 'No definida';
                try {
                    const date = new Date(dateStr);
                    return date.toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                } catch (e) {
                    console.error('Error formatting date:', e);
                    return 'Fecha inv√°lida';
                }
            };

            const safeString = (str) => {
                return str ? String(str).replace(/[<>]/g, '') : '';
            };

            // Crear contenido HTML de manera segura
            try {
                const htmlContent = `
                    <div style="padding: 20px;">
                        <h4 style="color: #007bff; margin-bottom: 20px; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
                            ${safeString(taskTitle)}
                        </h4>
                        
                        <div style="margin-bottom: 25px;">
                            <div style="display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap;">
                                <span style="background: #007bff; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; font-weight: bold;">
                                    Prioridad: ${safeString(taskPriority)}
                                </span>
                                <span style="background: #28a745; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; font-weight: bold;">
                                    Estado: ${safeString(taskStatus)}
                                </span>
                                ${task.fase_nombre ? `
                                    <span style="background: #17a2b8; color: white; padding: 6px 12px; border-radius: 15px; font-size: 12px; font-weight: bold;">
                                        Fase: ${safeString(task.fase_nombre)}
                                    </span>
                                ` : ''}
                            </div>
                            
                            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff; margin: 20px 0;">
                                <h6 style="color: #333; margin-bottom: 10px; font-weight: bold;">Descripci√≥n:</h6>
                                <p style="color: #666; line-height: 1.6; margin: 0;">
                                    ${safeString(taskDescription)}
                                </p>
                            </div>
                            
                            <div style="background: #e9ecef; padding: 20px; border-radius: 8px; margin: 20px 0;">
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                                    <div>
                                        <strong style="color: #495057;">Asignado a:</strong><br>
                                        <span style="color: #6c757d;">
                                            ${task.asignado_nombres ? 
                                                `${safeString(task.asignado_nombres)} ${safeString(task.asignado_apellidos || '')}` : 
                                                safeString(taskAssignee)
                                            }
                                        </span>
                                    </div>
                                    <div>
                                        <strong style="color: #495057;">Fecha l√≠mite:</strong><br>
                                        <span style="color: #6c757d;">${formatDate(taskDueDate)}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div style="border-top: 2px solid #dee2e6; padding-top: 20px;">
                            <h5 style="color: #333; margin-bottom: 15px; display: flex; align-items: center;">
                                <i class="fas fa-comments" style="margin-right: 8px; color: #007bff;"></i>
                                Comentarios (${comments.length})
                            </h5>
                            <div style="max-height: 400px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 8px; padding: 15px;">
                                ${comments.length > 0 ? 
                                    comments.map(comment => `
                                        <div style="background: white; padding: 15px; margin-bottom: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-left: 3px solid #007bff;">
                                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                                <strong style="color: #007bff; font-size: 14px;">
                                                    ${safeString(comment.nombres || comment.usuario_nombre || 'Usuario')} ${safeString(comment.apellidos || '')}
                                                </strong>
                                                <small style="color: #6c757d; font-size: 12px;">
                                                    ${formatDate(comment.created_at || comment.fecha_creacion)}
                                                </small>
                                            </div>
                                            <p style="margin: 0; color: #333; line-height: 1.5;">
                                                ${safeString(comment.comentario || 'Sin comentario')}
                                            </p>
                                        </div>
                                    `).join('') : 
                                    '<div style="text-align: center; padding: 40px; color: #6c757d; font-style: italic;"><i class="fas fa-comment-slash" style="font-size: 24px; margin-bottom: 10px; display: block;"></i>No hay comentarios disponibles</div>'
                                }
                            </div>
                        </div>
                    </div>
                `;

                console.log('Setting modal content...');
                modalBody.innerHTML = htmlContent;
                console.log('Content set successfully');
                
                // Mostrar modal con configuraci√≥n expl√≠cita
                console.log('Creating Bootstrap modal...');
                const modal = new bootstrap.Modal(modalElement, {
                    backdrop: true,
                    keyboard: true,
                    focus: true
                });
                
                console.log('Showing modal...');
                modal.show();
                console.log('Modal shown successfully');
                console.log('=== MODAL DEBUG END ===');
                
            } catch (error) {
                console.error('Error in modal creation:', error);
                console.error('Error stack:', error.stack);
                alert('Error al crear el contenido del modal: ' + error.message);
            }
        }

        // Obtener datos reales del proyecto
        function getRealProjectTasks() {
            // Convertir las tareas del proyecto a formato Kanban
            const projectTasks = <%- JSON.stringify(tasks || []) %>;
            
            const kanbanData = {
                todo: [],
                in_progress: [],
                review: [],
                done: []
            };
            
            projectTasks.forEach(task => {
                const kanbanTask = {
                    id: task.id,
                    title: task.titulo || task.nombre,
                    description: task.descripcion,
                    priority: task.prioridad || 'medium',
                    assignee: task.asignado_nombres ? `${task.asignado_nombres} ${task.asignado_apellidos || ''}`.trim() : 'Sin asignar',
                    due_date: task.fecha_limite || task.fecha_vencimiento,
                    status: task.estado
                };
                
                // Mapear estados a columnas del Kanban
                switch (task.estado) {
                    case 'pendiente':
                    case 'nuevo':
                        kanbanData.todo.push(kanbanTask);
                        break;
                    case 'en_progreso':
                    case 'entregado':
                        kanbanData.in_progress.push(kanbanTask);
                        break;
                    case 'en_revision':
                        kanbanData.review.push(kanbanTask);
                        break;
                    case 'completado':
                    case 'aprobado':
                    case 'revisado':
                        kanbanData.done.push(kanbanTask);
                        break;
                    default:
                        kanbanData.todo.push(kanbanTask);
                }
            });
            
            return kanbanData;
        }

        // Datos de ejemplo para el Kanban
        function getExampleTasks() {
            return [
                {
                    id: 1,
                    title: 'Dise√±ar interfaz de usuario',
                    description: 'Crear mockups y prototipos',
                    status: 'todo',
                    priority: 'high',
                    assignee: 'Juan P√©rez',
                    due_date: '2024-01-15'
                },
                {
                    id: 2,
                    title: 'Implementar autenticaci√≥n',
                    description: 'Sistema de login y registro',
                    status: 'in_progress',
                    priority: 'high',
                    assignee: 'Mar√≠a Garc√≠a',
                    due_date: '2024-01-20'
                },
                {
                    id: 3,
                    title: 'Configurar base de datos',
                    description: 'Esquema y migraciones',
                    status: 'review',
                    priority: 'medium',
                    assignee: 'Carlos L√≥pez',
                    due_date: '2024-01-10'
                },
                {
                    id: 4,
                    title: 'Documentaci√≥n API',
                    description: 'Documentar endpoints',
                    status: 'done',
                    priority: 'low',
                    assignee: 'Ana Mart√≠n',
                    due_date: '2024-01-05'
                }
            ];
        }

        // Funciones para el dashboard mejorado
        function initializeDashboard() {
            updateProgressBars();
            updateTimeProgress();
            updatePerformanceMetrics();
        }

        function updateProgressBars() {
            // Actualizar barra de progreso principal
            const progressFill = document.querySelector('.progress-fill');
            if (progressFill) {
                const percentage = calculateTaskProgress();
                progressFill.style.width = percentage + '%';
            }

            // Actualizar barra de progreso temporal
            const timeProgressFill = document.querySelector('.time-progress-fill');
            if (timeProgressFill) {
                const timePercentage = calculateTimeProgress();
                timeProgressFill.style.width = timePercentage + '%';
            }
        }

        function calculateTaskProgress() {
            const totalTasks = <%= project.tasks ? project.tasks.length : 0 %>;
            const completedTasks = <%= project.tasks ? project.tasks.filter(t => 
                t.estado === 'completado' || 
                t.estado === 'aprobado' || 
                t.estado === 'revisado' ||
                t.estado === 'completada'
            ).length : 0 %>;
            return totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
        }

        function calculateTimeProgress() {
            const startDate = new Date('<%= project.fecha_inicio %>');
            const endDate = new Date('<%= project.fecha_limite || new Date() %>');
            const currentDate = new Date();
            
            const totalTime = endDate - startDate;
            const elapsedTime = currentDate - startDate;
            
            if (totalTime <= 0) return 0;
            const percentage = Math.min(100, Math.max(0, (elapsedTime / totalTime) * 100));
            return Math.round(percentage);
        }

        function updateTimeProgress() {
            const daysLeftElement = document.querySelector('.days-left');
            if (daysLeftElement) {
                const endDate = new Date('<%= project.fecha_limite || new Date() %>');
                const currentDate = new Date();
                const timeDiff = endDate - currentDate;
                const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

                // Actualizar clase seg√∫n d√≠as restantes
                daysLeftElement.className = 'days-left';
                if (daysLeft < 0) {
                    daysLeftElement.classList.add('overdue');
                } else if (daysLeft <= 7) {
                    daysLeftElement.classList.add('warning');
                } else {
                    daysLeftElement.classList.add('good');
                }
            }
        }

        function updatePerformanceMetrics() {
            // Calcular tareas por d√≠a
            const tasksPerDay = calculateTasksPerDay();
            const tasksPerDayElement = document.querySelector('.metric-value[data-metric="tasks-per-day"]');
            if (tasksPerDayElement) {
                tasksPerDayElement.textContent = tasksPerDay.toFixed(1);
            }

            // Calcular tareas por miembro
            const tasksPerMember = calculateTasksPerMember();
            const tasksPerMemberElement = document.querySelector('.metric-value[data-metric="tasks-per-member"]');
            if (tasksPerMemberElement) {
                tasksPerMemberElement.textContent = tasksPerMember.toFixed(1);
            }
        }

        function calculateTasksPerDay() {
            const startDate = new Date('<%= project.fecha_inicio %>');
            const currentDate = new Date();
            const daysDiff = Math.max(1, Math.ceil((currentDate - startDate) / (1000 * 60 * 60 * 24)));
            const completedTasks = <%= project.tasks ? project.tasks.filter(t => 
                t.estado === 'completado' || 
                t.estado === 'aprobado' || 
                t.estado === 'revisado' ||
                t.estado === 'completada'
            ).length : 0 %>;
            return completedTasks / daysDiff;
        }

        function calculateTasksPerMember() {
            const totalMembers = <%= project.members ? project.members.length : 1 %>;
            const totalTasks = <%= project.tasks ? project.tasks.length : 0 %>;
            return totalTasks / totalMembers;
        }

        // Animaciones para las m√©tricas
        function animateCounters() {
            const counters = document.querySelectorAll('.stat-number, .metric-value');
            counters.forEach(counter => {
                const target = parseInt(counter.textContent) || parseFloat(counter.textContent) || 0;
                let current = 0;
                const increment = target / 50;
                const timer = setInterval(() => {
                    current += increment;
                    if (current >= target) {
                        counter.textContent = target % 1 === 0 ? target : target.toFixed(1);
                        clearInterval(timer);
                    } else {
                        counter.textContent = current % 1 === 0 ? Math.floor(current) : current.toFixed(1);
                    }
                }, 20);
            });
        }

        // Actualizar dashboard cada 30 segundos
        function startDashboardUpdates() {
            setInterval(() => {
                updateProgressBars();
                updateTimeProgress();
                updatePerformanceMetrics();
            }, 30000);
        }

        // ===== FUNCIONES DEL TIMELINE =====

        // Filtrar eventos del timeline
        function filterTimelineEvents(type) {
            const events = document.querySelectorAll('.timeline-event');
            const filterButtons = document.querySelectorAll('.timeline-filter-btn');
            
            // Actualizar botones activos
            filterButtons.forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.filter === type) {
                    btn.classList.add('active');
                }
            });
            
            // Mostrar/ocultar eventos
            events.forEach(event => {
                if (type === 'all' || event.dataset.type === type) {
                    event.classList.remove('hidden');
                } else {
                    event.classList.add('hidden');
                }
            });
        }

        // Calcular d√≠as restantes
        function calculateDaysRemaining(endDate) {
            const today = new Date();
            const end = new Date(endDate);
            const diffTime = end - today;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        }

        // Formatear fecha para mostrar
        function formatTimelineDate(date) {
            const options = { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            return new Date(date).toLocaleDateString('es-ES', options);
        }

        // Generar eventos del timeline din√°micamente
        function generateTimelineEvents() {
            const project = {
                id: '<%= project.id %>',
                name: '<%= project.name %>',
                description: '<%= project.description %>',
                startDate: '<%= project.start_date %>',
                endDate: '<%= project.end_date %>',
                status: '<%= project.status %>',
                createdAt: '<%= project.created_at %>'
            };

            const events = [];
            const today = new Date();
            const projectStart = new Date(project.startDate);
            const projectEnd = new Date(project.endDate);

            // Evento de creaci√≥n del proyecto
            events.push({
                type: 'project',
                date: project.createdAt,
                title: 'Proyecto Creado',
                description: `Se cre√≥ el proyecto "${project.name}"`,
                icon: 'fas fa-rocket',
                marker: 'project-marker',
                tag: 'project-tag',
                tagText: 'Proyecto'
            });

            // Eventos de miembros (simulados)
            const memberEvents = [
                {
                    type: 'member',
                    date: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
                    title: 'Miembro Agregado',
                    description: 'Se agreg√≥ un nuevo miembro al equipo',
                    icon: 'fas fa-user-plus',
                    marker: 'member-marker',
                    tag: 'member-tag',
                    tagText: 'Equipo',
                    role: 'Desarrollador'
                },
                {
                    type: 'member',
                    date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
                    title: 'Miembro Agregado',
                    description: 'Se agreg√≥ un dise√±ador al proyecto',
                    icon: 'fas fa-user-plus',
                    marker: 'member-marker',
                    tag: 'member-tag',
                    tagText: 'Equipo',
                    role: 'Dise√±ador'
                }
            ];

            // Eventos de tareas (simulados)
            const taskEvents = [
                {
                    type: 'task',
                    date: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),
                    title: 'Tarea Completada',
                    description: 'Configuraci√≥n inicial del proyecto',
                    icon: 'fas fa-check',
                    marker: 'task-done',
                    tag: 'task-tag',
                    tagText: 'Tarea',
                    assignee: 'Juan P√©rez'
                },
                {
                    type: 'task',
                    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
                    title: 'Tarea en Progreso',
                    description: 'Desarrollo de la interfaz principal',
                    icon: 'fas fa-spinner',
                    marker: 'task-in-progress',
                    tag: 'task-tag',
                    tagText: 'Tarea',
                    assignee: 'Mar√≠a Garc√≠a'
                },
                {
                    type: 'task',
                    date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
                    title: 'Nueva Tarea',
                    description: 'Implementaci√≥n de autenticaci√≥n',
                    icon: 'fas fa-plus',
                    marker: 'task-marker',
                    tag: 'task-tag',
                    tagText: 'Tarea',
                    assignee: 'Carlos L√≥pez'
                }
            ];

            // Estado actual
            events.push({
                type: 'current',
                date: today.toISOString(),
                title: 'Estado Actual',
                description: `Proyecto en estado: ${project.status}`,
                icon: 'fas fa-clock',
                marker: 'current-marker',
                tag: 'current-tag',
                tagText: 'Actual',
                isCurrent: true
            });

            // Fecha l√≠mite
            if (projectEnd > today) {
                events.push({
                    type: 'deadline',
                    date: project.endDate,
                    title: 'Fecha L√≠mite',
                    description: 'Fecha l√≠mite para completar el proyecto',
                    icon: 'fas fa-flag-checkered',
                    marker: 'deadline-marker',
                    tag: 'deadline-tag',
                    tagText: 'Deadline',
                    isFuture: true
                });
            }

            // Combinar y ordenar eventos
            return [...events, ...memberEvents, ...taskEvents].sort((a, b) => 
                new Date(a.date) - new Date(b.date)
            );
        }

        // Renderizar timeline
        function renderTimeline() {
            const timelineContainer = document.querySelector('.timeline-container');
            if (!timelineContainer) return;

            const events = generateTimelineEvents();
            const today = new Date();

            let timelineHTML = '<div class="timeline-line"></div>';

            events.forEach((event, index) => {
                const eventDate = new Date(event.date);
                const isCurrentOrFuture = eventDate >= today;
                const cardClass = event.isCurrent ? 'current-card' : 
                                 event.isFuture ? 'future-card' : '';

                let metaHTML = `<span class="timeline-tag ${event.tag}">${event.tagText}</span>`;
                
                if (event.role) {
                    metaHTML += `<span class="timeline-role">${event.role}</span>`;
                }
                
                if (event.assignee) {
                    metaHTML += `<span class="timeline-assignee">Asignado a: ${event.assignee}</span>`;
                }

                if (event.isCurrent) {
                    const projectEnd = new Date('<%= project.end_date %>');
                    const totalDays = Math.ceil((projectEnd - new Date('<%= project.start_date %>')) / (1000 * 60 * 60 * 24));
                    const elapsedDays = Math.ceil((today - new Date('<%= project.start_date %>')) / (1000 * 60 * 60 * 24));
                    const progress = Math.min((elapsedDays / totalDays) * 100, 100);
                    const daysRemaining = calculateDaysRemaining('<%= project.end_date %>');

                    metaHTML += `
                        <div class="current-progress">
                            <div class="progress-mini">
                                <div class="progress-mini-fill" style="width: ${progress}%"></div>
                            </div>
                            <span class="days-remaining">${daysRemaining} d√≠as restantes</span>
                        </div>
                    `;
                }

                timelineHTML += `
                    <div class="timeline-event" data-type="${event.type}" style="animation-delay: ${index * 0.1}s">
                        <div class="timeline-marker ${event.marker}">
                            <i class="${event.icon}"></i>
                        </div>
                        <div class="timeline-content-card ${cardClass}">
                            <div class="timeline-header">
                                <h4>${event.title}</h4>
                                <span class="timeline-date">${formatTimelineDate(event.date)}</span>
                            </div>
                            <div class="timeline-description">${event.description}</div>
                            <div class="timeline-meta">
                                ${metaHTML}
                            </div>
                        </div>
                    </div>
                `;
            });

            timelineContainer.innerHTML = timelineHTML;
        }

        // Inicializar timeline cuando se muestra la pesta√±a
        function initializeTimeline() {
            renderTimeline();
            
            // Configurar filtros
            const filterButtons = document.querySelectorAll('.timeline-filter-btn');
            filterButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    filterTimelineEvents(btn.dataset.filter);
                });
            });
        }

        // Actualizar timeline peri√≥dicamente
        function updateTimeline() {
            const timelineTab = document.getElementById('timeline-tab');
            if (timelineTab && !timelineTab.classList.contains('hidden')) {
                renderTimeline();
            }
        }

        // Inicializar Kanban, Dashboard y Timeline cuando se carga la p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            setupKanbanDragAndDrop();
            initializeDashboard();
            animateCounters();
            startDashboardUpdates();
            
            // Inicializar timeline cuando se muestra por primera vez
            const timelineButton = document.querySelector('[onclick="showTab(\'timeline\')"]');
            if (timelineButton) {
                const originalShowTab = window.showTab;
                window.showTab = function(tabName) {
                    originalShowTab(tabName);
                    if (tabName === 'timeline') {
                        setTimeout(initializeTimeline, 100);
                    }
                };
            }
            
            // Actualizar timeline cada minuto
            setInterval(updateTimeline, 60000);
        });

        // Funcionalidad de la sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }

        // Cerrar sidebar al hacer click fuera de ella en m√≥viles
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.querySelector('.mobile-menu-toggle');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(event.target) && 
                !toggleBtn.contains(event.target) && 
                sidebar.classList.contains('open')) {
                sidebar.classList.remove('open');
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>