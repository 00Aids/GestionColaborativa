<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nuevo Proyecto - Sistema Académico</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            color: #1e293b;
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header p {
            color: #64748b;
            font-size: 16px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-outline {
            background: transparent;
            color: #64748b;
            border: 2px solid #e5e7eb;
        }

        .btn-outline:hover {
            background: #f8fafc;
            border-color: #cbd5e1;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 40px;
            padding-top: 30px;
            border-top: 1px solid #e5e7eb;
        }

        .info-box {
            background: linear-gradient(135deg, #e0f2fe 0%, #f3e5f5 100%);
            border: 2px solid #81d4fa;
            border-radius: 12px;
            padding: 20px;
            display: flex;
            align-items: flex-start;
            gap: 15px;
            margin: 20px 0;
        }

        .info-box i {
            color: #0277bd;
            font-size: 24px;
            margin-top: 2px;
        }

        .info-content h4 {
            color: #1e293b;
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .info-content p {
            color: #64748b;
            font-size: 14px;
            line-height: 1.5;
            margin: 0;
        }

        .alert {
            padding: 15px;
            border-radius: 12px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert-success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }

        .alert-error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }

        /* Estilos para botones de agregar */
        .form-label-with-action {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .btn-add-item {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 6px 10px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .btn-add-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        /* Estilos para modales */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 0;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.3s ease;
        }

        .modal-close:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 30px;
        }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
        }

        .btn-modal {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-modal-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-modal-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .btn-modal-secondary {
            background: #f8fafc;
            color: #64748b;
            border: 1px solid #e5e7eb;
        }

        .btn-modal-secondary:hover {
            background: #f1f5f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-plus-circle"></i> Nuevo Proyecto</h1>
            <p>Completa la información para crear un nuevo proyecto de investigación</p>
        </div>

        <div id="alertContainer"></div>

        <form id="projectForm" onsubmit="saveProject(event)">
            <div class="form-group">
                <label class="form-label" for="titulo">Título del Proyecto *</label>
                <input type="text" class="form-control" id="titulo" name="titulo" required>
            </div>
            
            <div class="form-group">
                <label class="form-label" for="descripcion">Descripción *</label>
                <textarea class="form-control" id="descripcion" name="descripcion" rows="4" required></textarea>
            </div>
            
            <div class="form-group">
                <div class="info-box">
                    <i class="fas fa-info-circle"></i>
                    <div class="info-content">
                        <h4>Asignación de Participantes</h4>
                        <p>Puedes crear el proyecto ahora y luego invitar a estudiantes y directores desde la página de detalles del proyecto.</p>
                    </div>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <div class="form-label-with-action">
                        <label class="form-label" for="linea_investigacion_id">Línea de Investigación</label>
                        <button type="button" class="btn-add-item" onclick="openLineaModal()" title="Crear nueva línea de investigación">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <select class="form-control" id="linea_investigacion_id" name="linea_investigacion_id">
                        <option value="">Seleccionar línea</option>
                        <% if (typeof lineasInvestigacion !== 'undefined' && lineasInvestigacion) { %>
                            <% lineasInvestigacion.forEach(linea => { %>
                                <option value="<%= linea.id %>"><%= linea.nombre %></option>
                            <% }) %>
                        <% } %>
                    </select>
                </div>
                
                <div class="form-group">
                    <div class="form-label-with-action">
                        <label class="form-label" for="ciclo_academico_id">Ciclo Académico *</label>
                        <button type="button" class="btn-add-item" onclick="openCicloModal()" title="Crear nuevo ciclo académico">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <select class="form-control" id="ciclo_academico_id" name="ciclo_academico_id" required>
                        <option value="">Seleccionar ciclo</option>
                        <% if (typeof ciclosAcademicos !== 'undefined' && ciclosAcademicos) { %>
                            <% ciclosAcademicos.forEach(ciclo => { %>
                                <option value="<%= ciclo.id %>"><%= ciclo.nombre %></option>
                            <% }) %>
                        <% } %>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label" for="fecha_inicio">Fecha de Inicio *</label>
                    <input type="date" class="form-control" id="fecha_inicio" name="fecha_inicio" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="fecha_fin">Fecha de Fin *</label>
                    <input type="date" class="form-control" id="fecha_fin" name="fecha_fin" required>
                </div>
            </div>

            <% if (Array.isArray(userAreas) && userAreas.length > 1) { %>
            <div class="form-group">
                <label class="form-label" for="area_trabajo_id">Área de Trabajo</label>
                <select class="form-control" id="area_trabajo_id" name="area_trabajo_id">
                    <% userAreas.forEach(area => { %>
                        <option value="<%= area.area_trabajo_id || area.id %>" <%= (area.area_trabajo_id || area.id) === areaTrabajoId ? 'selected' : '' %>><%= area.nombre || area.area_nombre || ('Área ' + (area.area_trabajo_id || area.id)) %></option>
                    <% }) %>
                </select>
            </div>
            <% } %>

            <div class="form-group">
                <label class="form-label" for="estado">Estado</label>
                <select class="form-control" id="estado" name="estado">
                    <option value="borrador" selected>Borrador</option>
                    <option value="enviado">Enviado</option>
                    <option value="en_revision">En Revisión</option>
                    <option value="aprobado">Aprobado</option>
                    <option value="rechazado">Rechazado</option>
                    <option value="en_desarrollo">En Desarrollo</option>
                    <option value="finalizado">Finalizado</option>
                </select>
            </div>

            <div class="form-actions">
                <a href="<%= (user && (user.rol_nombre === 'Administrador General' || user.rol_nombre === 'Coordinador Académico')) ? '/admin/projects' : (user && (user.rol_nombre === 'Director' || user.rol_nombre === 'Director de Proyecto')) ? '/director/projects' : '/projects' %>" class="btn btn-outline">
                    <i class="fas fa-times"></i> Cancelar
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Crear Proyecto
                </button>
            </div>
        </form>
    </div>

    <!-- Modal para crear línea de investigación -->
    <div id="lineaModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-microscope"></i> Nueva Línea de Investigación</h3>
                <button class="modal-close" onclick="closeLineaModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="lineaForm">
                    <div class="form-group">
                        <label class="form-label" for="linea_nombre">Nombre de la Línea *</label>
                        <input type="text" class="form-control" id="linea_nombre" name="nombre" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="linea_descripcion">Descripción</label>
                        <textarea class="form-control" id="linea_descripcion" name="descripcion" rows="3"></textarea>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn-modal btn-modal-secondary" onclick="closeLineaModal()">
                            Cancelar
                        </button>
                        <button type="submit" class="btn-modal btn-modal-primary">
                            <i class="fas fa-save"></i> Crear Línea
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal para crear ciclo académico -->
    <div id="cicloModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-calendar-alt"></i> Nuevo Ciclo Académico</h3>
                <button class="modal-close" onclick="closeCicloModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="cicloForm">
                    <div class="form-group">
                        <label class="form-label" for="ciclo_nombre">Nombre del Ciclo *</label>
                        <input type="text" class="form-control" id="ciclo_nombre" name="nombre" required 
                               placeholder="Ej: 2024-I, Semestre 1 2024">
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="ciclo_fecha_inicio">Fecha de Inicio *</label>
                            <input type="date" class="form-control" id="ciclo_fecha_inicio" name="fecha_inicio" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="ciclo_fecha_fin">Fecha de Fin *</label>
                            <input type="date" class="form-control" id="ciclo_fecha_fin" name="fecha_fin" required>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn-modal btn-modal-secondary" onclick="closeCicloModal()">
                            Cancelar
                        </button>
                        <button type="submit" class="btn-modal btn-modal-primary">
                            <i class="fas fa-save"></i> Crear Ciclo
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        async function saveProject(event) {
            event.preventDefault();
            
            const form = document.getElementById('projectForm');
            const formData = new FormData(form);
            
            // Validar fechas
            const fechaInicio = new Date(formData.get('fecha_inicio'));
            const fechaFin = new Date(formData.get('fecha_fin'));
            
            if (fechaFin <= fechaInicio) {
                showAlert('La fecha de fin debe ser posterior a la fecha de inicio', 'error');
                return;
            }
            
            const projectData = {
                titulo: formData.get('titulo'),
                descripcion: formData.get('descripcion'),
                linea_investigacion_id: formData.get('linea_investigacion_id'),
                ciclo_academico_id: formData.get('ciclo_academico_id'),
                fecha_inicio: formData.get('fecha_inicio'),
                fecha_fin: formData.get('fecha_fin'),
                estado: formData.get('estado') || 'borrador',
                area_trabajo_id: formData.get('area_trabajo_id') || null
            };
            
            try {
                // Determinar la URL correcta basada en la ruta actual
                const submitUrl = window.location.pathname.includes('/admin/') ? '/admin/projects' : '/projects/create';
                
                const response = await fetch(submitUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(projectData)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    showAlert('Proyecto creado exitosamente', 'success');
                    setTimeout(() => {
                        // Redirigir a la página correcta basada en rol y ruta actual
                        const isAdminPath = window.location.pathname.includes('/admin/');
                        const userRole = '<%= user && user.rol_nombre ? user.rol_nombre : "" %>';
                        let redirectUrl;
                        if (isAdminPath) {
                          redirectUrl = '/admin/projects';
                        } else if (userRole === 'Director' || userRole === 'Director de Proyecto') {
                          redirectUrl = (result && result.projectId ? `/director/projects/${result.projectId}` : '/director/projects');
                        } else {
                          redirectUrl = (result && result.projectId ? `/projects/${result.projectId}` : '/projects');
                        }
                        window.location.href = redirectUrl;
                    }, 1500);
                } else {
                    showAlert(result.message || 'Error al crear el proyecto', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Error de conexión al crear el proyecto', 'error');
            }
        }
        
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
            
            alertContainer.innerHTML = `
                <div class="alert ${alertClass}">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                    ${message}
                </div>
            `;
            
            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 5000);
        }

        // Funciones para manejar modales
        function openLineaModal() {
            document.getElementById('lineaModal').style.display = 'block';
            document.getElementById('linea_nombre').focus();
        }

        function closeLineaModal() {
            document.getElementById('lineaModal').style.display = 'none';
            document.getElementById('lineaForm').reset();
        }

        function openCicloModal() {
            document.getElementById('cicloModal').style.display = 'block';
            document.getElementById('ciclo_nombre').focus();
        }

        function closeCicloModal() {
            document.getElementById('cicloModal').style.display = 'none';
            document.getElementById('cicloForm').reset();
        }

        // Cerrar modales al hacer clic fuera de ellos
        window.onclick = function(event) {
            const lineaModal = document.getElementById('lineaModal');
            const cicloModal = document.getElementById('cicloModal');
            
            if (event.target === lineaModal) {
                closeLineaModal();
            }
            if (event.target === cicloModal) {
                closeCicloModal();
            }
        }

        // Manejar formulario de línea de investigación
        document.getElementById('lineaForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const lineaData = {
                nombre: formData.get('nombre'),
                descripcion: formData.get('descripcion')
            };

            try {
                const response = await fetch('/admin/api/lineas-investigacion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(lineaData)
                });

                if (!response.ok) {
                    const errorResult = await response.json();
                    showAlert(errorResult.message || 'Error al crear la línea de investigación', 'error');
                    return;
                }

                const result = await response.json();
                console.log('Respuesta del servidor (línea):', result);

                if (result.success && result.linea) {
                    // Agregar la nueva línea al select
                    const select = document.getElementById('linea_investigacion_id');
                    const option = new Option(result.linea.nombre, result.linea.id);
                    select.add(option);
                    select.value = result.linea.id;
                    
                    closeLineaModal();
                    showAlert(result.message || 'Línea de investigación creada exitosamente', 'success');
                } else {
                    console.error('Respuesta inesperada (línea):', result);
                    showAlert('Error: Respuesta inesperada del servidor', 'error');
                }
            } catch (error) {
                console.error('Error completo (línea):', error);
                showAlert('Error de red o parsing: ' + error.message, 'error');
            }
        });

        // Manejar formulario de ciclo académico
        document.getElementById('cicloForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const cicloData = {
                nombre: formData.get('nombre'),
                descripcion: formData.get('descripcion'),
                fecha_inicio: formData.get('fecha_inicio'),
                fecha_fin: formData.get('fecha_fin')
            };

            // Validar fechas si ambas están presentes
            if (cicloData.fecha_inicio && cicloData.fecha_fin) {
                const fechaInicio = new Date(cicloData.fecha_inicio);
                const fechaFin = new Date(cicloData.fecha_fin);
                
                if (fechaFin <= fechaInicio) {
                    showAlert('La fecha de fin debe ser posterior a la fecha de inicio', 'error');
                    return;
                }
            }

            try {
                const response = await fetch('/admin/api/ciclos-academicos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(cicloData)
                });

                if (!response.ok) {
                    const errorResult = await response.json();
                    showAlert(errorResult.message || 'Error al crear el ciclo académico', 'error');
                    return;
                }

                const result = await response.json();
                console.log('Respuesta del servidor:', result);

                if (result.success && result.ciclo) {
                    // Agregar el nuevo ciclo al select
                    const select = document.getElementById('ciclo_academico_id');
                    const option = new Option(result.ciclo.nombre, result.ciclo.id);
                    select.add(option);
                    select.value = result.ciclo.id;
                    
                    closeCicloModal();
                    showAlert(result.message || 'Ciclo académico creado exitosamente', 'success');
                } else {
                    console.error('Respuesta inesperada:', result);
                    showAlert('Error: Respuesta inesperada del servidor', 'error');
                }
            } catch (error) {
                console.error('Error completo:', error);
                showAlert('Error de red o parsing: ' + error.message, 'error');
            }
        });
    </script>
</body>
</html>