<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Sistema Acad√©mico</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* ===== SIDEBAR MODERNO ===== */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 0;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            transition: all 0.3s ease;
            border-right: 1px solid rgba(255, 255, 255, 0.2);
        }

        .sidebar-header {
            padding: 30px 25px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .sidebar-header h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-nav {
            padding: 20px 0;
            height: calc(100vh - 120px);
            overflow-y: auto;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 25px;
            color: #64748b;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 14px;
            border-left: 3px solid transparent;
        }

        .nav-item i {
            width: 20px;
            margin-right: 12px;
            font-size: 16px;
        }

        .nav-item:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            border-left-color: #667eea;
        }

        .nav-item.active {
            background: rgba(102, 126, 234, 0.15);
            color: #667eea;
            border-left-color: #667eea;
            font-weight: 600;
        }

        /* ===== MAIN CONTENT ===== */
        .main-content {
            margin-left: 280px;
            min-height: 100vh;
            background: transparent;
        }

        .top-bar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 10px;
            color: white;
            font-size: 14px;
        }

        .breadcrumb a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .breadcrumb a:hover {
            color: white;
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 15px;
            color: white;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        /* ===== KANBAN BOARD ===== */
        .kanban-container {
            padding: 30px;
            height: calc(100vh - 80px);
            overflow: hidden;
        }

        .kanban-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 20px 25px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .kanban-title {
            color: white;
            font-size: 24px;
            font-weight: 700;
            margin: 0;
        }

        .kanban-actions {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .kanban-board {
            display: flex;
            gap: 20px;
            height: calc(100% - 120px);
            overflow-x: auto;
            padding-bottom: 20px;
        }

        .kanban-column {
            flex: 1;
            min-width: 300px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            flex-direction: column;
            max-height: 100%;
        }

        .column-header {
            padding: 20px 25px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .column-title {
            color: white;
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .column-count {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .column-body {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .task-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .task-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .task-title {
            font-size: 16px;
            font-weight: 600;
            color: #1e293b;
            margin: 0;
            line-height: 1.4;
        }

        .task-priority {
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-alta {
            background: #fee2e2;
            color: #dc2626;
        }

        .priority-media {
            background: #fef3c7;
            color: #d97706;
        }

        .priority-baja {
            background: #dcfce7;
            color: #16a34a;
        }

        .task-description {
            color: #64748b;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #64748b;
        }

        .task-assignee {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .assignee-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: 600;
        }

        .task-due-date {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .task-due-date.overdue {
            color: #dc2626;
        }



        .empty-column {
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-style: italic;
            padding: 40px 20px;
        }

        /* ===== MODAL STYLES ===== */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            padding: 25px 30px;
            border-bottom: 1px solid #f1f5f9;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f8fafc;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 700;
            color: #1e293b;
            margin: 0;
        }

        .close {
            color: #64748b;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover {
            color: #1e293b;
        }

        .modal-body {
            padding: 30px;
            max-height: calc(90vh - 140px);
            overflow-y: auto;
        }

        /* ===== RESPONSIVE ===== */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .main-content {
                margin-left: 0;
            }

            .kanban-board {
                flex-direction: column;
                height: auto;
            }

            .kanban-column {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><i class="fas fa-graduation-cap"></i> Admin Panel</h2>
        </div>
        <nav class="sidebar-nav">
            <a href="/dashboard/admin" class="nav-item">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </a>
            <a href="/admin/users" class="nav-item">
                <i class="fas fa-users"></i> Usuarios
            </a>
            <a href="/admin/roles" class="nav-item">
                <i class="fas fa-user-shield"></i> Roles
            </a>
            <a href="/admin/projects" class="nav-item active">
                <i class="fas fa-project-diagram"></i> Proyectos
            </a>
            <a href="/admin/deliverables" class="nav-item">
                <i class="fas fa-tasks"></i> Entregables
            </a>
            <a href="/admin/calendar" class="nav-item">
                <i class="fas fa-calendar"></i> Calendario
            </a>
            <a href="/admin/invitations" class="nav-item">
                <i class="fas fa-envelope"></i> Invitaciones
            </a>
            <a href="/admin/reports" class="nav-item">
                <i class="fas fa-chart-bar"></i> Reportes
            </a>
            <a href="/admin/settings" class="nav-item">
                <i class="fas fa-cog"></i> Configuraci√≥n
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="breadcrumb">
                <a href="/admin/projects"><i class="fas fa-project-diagram"></i> Proyectos</a>
                <i class="fas fa-chevron-right"></i>
                <a href="/admin/projects/<%= project.id %>"><%= project.titulo %></a>
                <i class="fas fa-chevron-right"></i>
                <span>Tareas</span>
            </div>
            <div class="user-profile">
                <div class="user-avatar">
                    <%= user.nombres.charAt(0).toUpperCase() %><%= user.apellidos.charAt(0).toUpperCase() %>
                </div>
                <div class="user-info">
                    <h4><%= user.nombres %> <%= user.apellidos %></h4>
                    <span><%= user.rol_nombre %></span>
                </div>
            </div>
        </div>

        <!-- Kanban Container -->
        <div class="kanban-container">
            <!-- Header -->
            <div class="kanban-header">
                <h1 class="kanban-title">
                    <i class="fas fa-tasks"></i>
                    Tablero de Tareas - <%= project.titulo %>
                </h1>
                <div class="kanban-actions">
                    <a href="/admin/projects/<%= project.id %>/tasks/new" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Nueva Tarea
                    </a>
                    <button class="btn btn-secondary" onclick="refreshBoard()">
                        <i class="fas fa-sync-alt"></i> Actualizar
                    </button>
                </div>
            </div>

            <!-- Kanban Board -->
            <div class="kanban-board">
                <!-- TODO Column -->
                <div class="kanban-column" data-status="todo">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #64748b;"></i>
                            Por Hacer
                        </div>
                        <div class="column-count"><%= tasksGrouped.todo.length %></div>
                    </div>
                    <div class="column-body" id="todo-column">
                        <% if (tasksGrouped.todo.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-inbox fa-2x" style="margin-bottom: 10px; opacity: 0.5;"></i>
                                <p>No hay tareas pendientes</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.todo.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>

                <!-- IN PROGRESS Column -->
                <div class="kanban-column" data-status="in_progress">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #f59e0b;"></i>
                            En Progreso
                        </div>
                        <div class="column-count"><%= tasksGrouped.in_progress.length %></div>
                    </div>
                    <div class="column-body" id="in_progress-column">
                        <% if (tasksGrouped.in_progress.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-clock fa-2x" style="margin-bottom: 10px; opacity: 0.5;"></i>
                                <p>No hay tareas en progreso</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.in_progress.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>

                <!-- DONE Column -->
                <div class="kanban-column" data-status="done">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #10b981;"></i>
                            Completadas
                        </div>
                        <div class="column-count"><%= tasksGrouped.done.length %></div>
                    </div>
                    <div class="column-body" id="done-column">
                        <% if (tasksGrouped.done.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-check-circle fa-2x" style="margin-bottom: 10px; opacity: 0.5;"></i>
                                <p>No hay tareas completadas</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.done.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Task Detail Modal -->
    <div id="taskModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Detalles de la Tarea</h2>
                <span class="close" onclick="closeTaskModal()">&times;</span>
            </div>
            <div class="modal-body" id="taskModalBody">
                <!-- Task details will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        const projectId = '<%= project.id %>';
        let currentTask = null;

        // Funci√≥n para abrir modal de tarea
        function openTaskModal(taskId) {
            fetch(`/admin/api/tasks/${taskId}/details`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        currentTask = data.task;
                        renderTaskModal({
                            task: data.task,
                            comments: data.task.comments || [],
                            history: data.task.history || []
                        });
                        document.getElementById('taskModal').style.display = 'block';
                    } else {
                        alert('Error al cargar los detalles de la tarea');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al cargar los detalles de la tarea');
                });
        }

        // Funci√≥n para cerrar modal
        function closeTaskModal() {
            document.getElementById('taskModal').style.display = 'none';
            currentTask = null;
        }

        // Funci√≥n para renderizar el modal de tarea
        function renderTaskModal(data) {
            const { task, comments, history } = data;
            const modalBody = document.getElementById('taskModalBody');
            

            
            modalBody.innerHTML = `
                <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 30px;">
                    <!-- Informaci√≥n Principal -->
                    <div>
                        <div style="margin-bottom: 25px;">
                            <h3 style="font-size: 24px; font-weight: 700; color: #1e293b; margin-bottom: 10px;">${task.titulo}</h3>
                            <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 15px;">
                                <span class="task-priority priority-${task.prioridad}">${task.prioridad}</span>
                                <span style="padding: 4px 8px; background: #f1f5f9; border-radius: 6px; font-size: 12px; color: #64748b;">
                                    ${task.fase_nombre || 'Sin fase'}
                                </span>
                            </div>
                            <p style="color: #64748b; line-height: 1.6;">${task.descripcion || 'Sin descripci√≥n'}</p>
                        </div>
                        
                        ${task.desarrollo_descripcion ? `
                            <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px; border-left: 4px solid #10b981;">
                                <h4 style="color: #1e293b; margin-bottom: 10px; font-weight: 600;">Desarrollo Completado</h4>
                                <p style="color: #64748b; line-height: 1.6;">${task.desarrollo_descripcion}</p>
                            </div>
                        ` : ''}
                        

                        
                        <!-- Comentarios -->
                        <div>
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Comentarios</h4>
                            <div id="commentsContainer" style="max-height: 300px; overflow-y: auto;">
                                ${comments.length > 0 ? comments.map(comment => `
                                    <div style="margin-bottom: 15px; padding: 15px; background: #f8fafc; border-radius: 10px;">
                                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                            <strong style="color: #1e293b;">${comment.nombres} ${comment.apellidos}</strong>
                                            <span style="font-size: 12px; color: #64748b;">${new Date(comment.created_at).toLocaleString()}</span>
                                        </div>
                                        <p style="color: #64748b; margin: 0; margin-bottom: ${comment.archivo_adjunto ? '10px' : '0'};">${comment.comentario}</p>
                                        ${comment.archivo_adjunto ? `
                                            <div style="margin-top: 8px; padding: 8px; background: white; border-radius: 6px; border: 1px solid #e2e8f0;">
                                                <a href="/uploads/comments/${JSON.parse(comment.archivo_adjunto).nombre_archivo}" 
                                                   target="_blank" 
                                                   style="display: flex; align-items: center; gap: 8px; text-decoration: none; color: #667eea;">
                                                    <i class="fas ${getFileIcon(JSON.parse(comment.archivo_adjunto).tipo_mime)}"></i>
                                                    <span style="font-size: 13px;">${JSON.parse(comment.archivo_adjunto).nombre_original}</span>
                                                    <span style="font-size: 11px; color: #64748b; margin-left: auto;">${formatFileSize(JSON.parse(comment.archivo_adjunto).tama√±o)}</span>
                                                </a>
                                            </div>
                                        ` : ''}
                                    </div>
                                `).join('') : '<p style="color: #64748b; font-style: italic;">No hay comentarios a√∫n</p>'}
                            </div>
                            
                            <!-- Agregar comentario -->
                            <div style="margin-top: 20px;">
                                <form id="commentForm" enctype="multipart/form-data">
                                    <textarea id="newComment" name="comentario" placeholder="Agregar un comentario..." 
                                             style="width: 100%; padding: 12px; border: 1px solid #e2e8f0; border-radius: 8px; resize: vertical; min-height: 80px;"></textarea>
                                    
                                    <!-- Secci√≥n de archivo adjunto -->
                                    <div style="margin-top: 10px; padding: 12px; background: #f8fafc; border-radius: 8px; border: 1px dashed #cbd5e0;">
                                        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                            <i class="fas fa-paperclip" style="color: #64748b;"></i>
                                            <span style="font-size: 14px; color: #64748b;">Adjuntar archivo (opcional)</span>
                                        </div>
                                        <input type="file" id="commentFile" name="archivo" 
                                               accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.jpg,.jpeg,.png,.gif,.webp,.txt,.zip,.rar"
                                               style="width: 100%; padding: 8px; border: 1px solid #e2e8f0; border-radius: 6px; background: white;">
                                        <div style="font-size: 12px; color: #64748b; margin-top: 5px;">
                                            Tipos permitidos: PDF, Word, Excel, PowerPoint, im√°genes, texto, archivos comprimidos. M√°ximo 10MB.
                                        </div>
                                        <div id="filePreview" style="margin-top: 8px; display: none;"></div>
                                    </div>
                                    
                                    <button type="button" onclick="addComment()" class="btn btn-primary" style="margin-top: 10px;">
                                        <i class="fas fa-comment"></i> Agregar Comentario
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Panel Lateral -->
                    <div>
                        <!-- Estado -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Estado</h4>
                            <select id="taskStatus" onchange="updateTaskStatus()" 
                                   style="width: 100%; padding: 10px; border: 1px solid #e2e8f0; border-radius: 8px;">
                                <option value="todo" ${task.estado_workflow === 'todo' ? 'selected' : ''}>Por Hacer</option>
                                <option value="in_progress" ${task.estado_workflow === 'in_progress' ? 'selected' : ''}>En Progreso</option>
                                <option value="done" ${task.estado_workflow === 'done' ? 'selected' : ''}>Completada</option>
                            </select>
                        </div>
                        
                        <!-- Asignaci√≥n -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Asignado a</h4>
                            ${task.asignado_nombres ? `
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <div class="assignee-avatar">${task.asignado_nombres.charAt(0)}${task.asignado_apellidos.charAt(0)}</div>
                                    <span>${task.asignado_nombres} ${task.asignado_apellidos}</span>
                                </div>
                            ` : '<p style="color: #64748b; font-style: italic;">Sin asignar</p>'}
                        </div>
                        
                        <!-- Fechas -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Fechas</h4>
                            <div style="font-size: 14px; color: #64748b;">
                                ${task.fecha_limite ? `
                                    <p><strong>Fecha l√≠mite:</strong> ${new Date(task.fecha_limite).toLocaleDateString()}</p>
                                ` : ''}
                                <p><strong>Creada:</strong> ${new Date(task.created_at).toLocaleDateString()}</p>
                                ${task.fecha_completado ? `
                                    <p><strong>Completada:</strong> ${new Date(task.fecha_completado).toLocaleDateString()}</p>
                                ` : ''}
                            </div>
                        </div>
                        
                        <!-- Tiempo -->
                        ${task.estimacion_horas || task.horas_trabajadas ? `
                            <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                                <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Tiempo</h4>
                                <div style="font-size: 14px; color: #64748b;">
                                    ${task.estimacion_horas ? `<p><strong>Estimado:</strong> ${task.estimacion_horas}h</p>` : ''}
                                    ${task.horas_trabajadas ? `<p><strong>Trabajadas:</strong> ${task.horas_trabajadas}h</p>` : ''}
                                </div>
                            </div>
                        ` : ''}
                        
                        <!-- Archivos -->
                        ${task.archivos_adjuntos && task.archivos_adjuntos.length > 0 ? `
                            <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                                <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Archivos Adjuntos</h4>
                                <div style="display: flex; flex-direction: column; gap: 8px;">
                                    ${task.archivos_adjuntos.map(file => `
                                        <a href="/uploads/${file.nombre_archivo}" target="_blank" 
                                           style="display: flex; align-items: center; gap: 8px; padding: 8px; background: white; border-radius: 6px; text-decoration: none; color: #667eea;">
                                            <i class="fas fa-file"></i>
                                            <span style="font-size: 14px;">${file.nombre_original}</span>
                                        </a>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }

        // Funci√≥n para actualizar estado de tarea
        function updateTaskStatus() {
            const newStatus = document.getElementById('taskStatus').value;
            
            fetch(`/admin/api/tasks/${currentTask.id}/workflow-status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    refreshBoard();
                    closeTaskModal();
                } else {
                    alert('Error al actualizar el estado: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al actualizar el estado');
            });
        }



        // Funciones auxiliares para archivos
        function getFileIcon(mimeType) {
            if (!mimeType) return 'fa-file';
            
            if (mimeType.includes('pdf')) return 'fa-file-pdf';
            if (mimeType.includes('word') || mimeType.includes('document')) return 'fa-file-word';
            if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'fa-file-excel';
            if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'fa-file-powerpoint';
            if (mimeType.includes('image')) return 'fa-file-image';
            if (mimeType.includes('text')) return 'fa-file-alt';
            if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('compressed')) return 'fa-file-archive';
            
            return 'fa-file';
        }

        function formatFileSize(bytes) {
            if (!bytes) return '0 B';
            
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        // Funci√≥n para agregar comentario
        function addComment() {
            const commentText = document.getElementById('newComment').value.trim();
            const fileInput = document.getElementById('commentFile');
            
            if (!commentText && !fileInput.files[0]) {
                alert('Por favor ingresa un comentario o adjunta un archivo');
                return;
            }
            
            const formData = new FormData();
            formData.append('comentario', commentText);
            
            if (fileInput.files[0]) {
                formData.append('archivo', fileInput.files[0]);
            }
            
            fetch(`/admin/api/tasks/${currentTask.id}/comments`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('newComment').value = '';
                    fileInput.value = '';
                    document.getElementById('filePreview').style.display = 'none';
                    // Recargar detalles de la tarea
                    openTaskModal(currentTask.id);
                } else {
                    alert('Error al agregar el comentario: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al agregar el comentario');
            });
        }

        // Preview de archivo seleccionado
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('commentFile');
            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    const preview = document.getElementById('filePreview');
                    
                    if (file) {
                        preview.innerHTML = `
                            <div style="display: flex; align-items: center; gap: 8px; padding: 8px; background: white; border-radius: 6px; border: 1px solid #e2e8f0;">
                                <i class="fas ${getFileIcon(file.type)}" style="color: #667eea;"></i>
                                <span style="font-size: 13px; color: #1e293b;">${file.name}</span>
                                <span style="font-size: 11px; color: #64748b; margin-left: auto;">${formatFileSize(file.size)}</span>
                            </div>
                        `;
                        preview.style.display = 'block';
                    } else {
                        preview.style.display = 'none';
                    }
                });
            }
        });

        // Funci√≥n para refrescar el tablero
        function refreshBoard() {
            location.reload();
        }

        // Cerrar modal al hacer clic fuera
        window.onclick = function(event) {
            const modal = document.getElementById('taskModal');
            if (event.target === modal) {
                closeTaskModal();
            }
        }

        // Funci√≥n para obtener el icono del archivo seg√∫n su tipo
        function getFileIcon(mimeType) {
            if (!mimeType) return 'fa-file';
            
            if (mimeType.includes('image/')) return 'fa-file-image';
            if (mimeType.includes('pdf')) return 'fa-file-pdf';
            if (mimeType.includes('word') || mimeType.includes('document')) return 'fa-file-word';
            if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'fa-file-excel';
            if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'fa-file-powerpoint';
            if (mimeType.includes('text/')) return 'fa-file-alt';
            if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('compressed')) return 'fa-file-archive';
            
            return 'fa-file';
        }

        // Funci√≥n para formatear el tama√±o del archivo
        function formatFileSize(bytes) {
            if (!bytes) return '0 B';
            
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        // Drag and drop functionality (opcional para futuras mejoras)
        // Se puede implementar m√°s adelante
    </script>
</body>
</html>