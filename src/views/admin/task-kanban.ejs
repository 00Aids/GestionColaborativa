<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Sistema Acad√©mico</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* ===== SIDEBAR MODERNO ===== */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 0;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            transition: all 0.3s ease;
            border-right: 1px solid rgba(255, 255, 255, 0.2);
        }

        .sidebar-header {
            padding: 30px 25px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .sidebar-header h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-nav {
            padding: 20px 0;
            height: calc(100vh - 120px);
            overflow-y: auto;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 25px;
            color: #64748b;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 14px;
            border-left: 3px solid transparent;
        }

        .nav-item i {
            width: 20px;
            margin-right: 12px;
            font-size: 16px;
        }

        .nav-item:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            border-left-color: #667eea;
        }

        .nav-item.active {
            background: rgba(102, 126, 234, 0.15);
            color: #667eea;
            border-left-color: #667eea;
            font-weight: 600;
        }

        /* ===== MAIN CONTENT ===== */
        .main-content {
            margin-left: 280px;
            min-height: 100vh;
            background: transparent;
        }

        .top-bar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .back-navigation {
            display: flex;
            align-items: center;
        }

        .back-arrow {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            font-size: 18px;
            padding: 8px 12px;
            border-radius: 8px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
        }

        .back-arrow:hover {
            color: white;
            background: rgba(255, 255, 255, 0.2);
            transform: translateX(-2px);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 15px;
            color: white;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .user-info h4 {
            margin: 0;
            font-size: 14px;
            font-weight: 600;
        }

        .user-info span {
            font-size: 12px;
            opacity: 0.8;
        }

        /* ===== KANBAN BOARD ===== */
        .kanban-container {
            padding: 30px;
            height: calc(100vh - 80px);
            overflow: hidden;
        }

        .kanban-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 25px 30px;
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .kanban-title {
            color: white;
            font-size: 28px;
            font-weight: 800;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .kanban-title i {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            padding: 12px;
            border-radius: 12px;
            font-size: 20px;
        }

        .kanban-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .btn-quick-create {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 15px rgba(240, 147, 251, 0.3);
            font-weight: 700;
        }

        .btn-quick-create:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(240, 147, 251, 0.4);
        }

        .kanban-board {
            display: flex;
            gap: 25px;
            height: calc(100% - 140px);
            overflow-x: auto;
            padding-bottom: 20px;
        }

        .kanban-column {
            flex: 1;
            min-width: 350px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            flex-direction: column;
            max-height: 100%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .kanban-column:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .column-header {
            padding: 25px 30px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px 20px 0 0;
        }

        .column-title {
            color: white;
            font-size: 18px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .column-title i {
            font-size: 12px;
            padding: 8px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
        }

        .column-count {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            min-width: 30px;
            text-align: center;
        }

        .column-body {
            flex: 1;
            padding: 25px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .task-card {
            background: white;
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.05);
            position: relative;
            overflow: hidden;
        }

        .task-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .task-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .task-title {
            font-size: 16px;
            font-weight: 700;
            color: #1e293b;
            margin: 0;
            line-height: 1.4;
            flex: 1;
            margin-right: 10px;
        }

        .task-priority {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .priority-alta {
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            color: #dc2626;
        }

        .priority-media {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            color: #d97706;
        }

        .priority-baja {
            background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
            color: #16a34a;
        }

        .task-description {
            color: #64748b;
            font-size: 14px;
            line-height: 1.6;
            margin-bottom: 20px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            /* Fallback para navegadores que no soportan line-clamp */
            line-clamp: 2;
        }

        .task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #64748b;
            margin-bottom: 15px;
        }

        .task-assignee {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .assignee-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 11px;
            font-weight: 700;
            border: 2px solid rgba(102, 126, 234, 0.2);
        }

        .task-due-date {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
            color: #667eea;
            font-weight: 600;
        }

        .task-due-date.overdue {
            background: rgba(220, 38, 38, 0.1);
            color: #dc2626;
        }

        .task-indicators {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #64748b;
        }

        .task-stats {
            display: flex;
            gap: 15px;
        }

        .task-stat {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 4px 8px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 6px;
            color: #667eea;
            font-weight: 600;
        }

        .task-status-badge {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 10px;
            border-radius: 12px;
            font-weight: 600;
            font-size: 11px;
        }

        .status-done {
            background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
            color: #16a34a;
        }

        .empty-column {
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-style: italic;
            padding: 60px 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .empty-column i {
            font-size: 48px;
            opacity: 0.3;
        }

        .empty-column p {
            font-size: 16px;
            font-weight: 500;
        }

        /* ===== MODAL STYLES ===== */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 20px;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            padding: 30px 35px;
            border-bottom: 1px solid #f1f5f9;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        }

        .modal-title {
            font-size: 24px;
            font-weight: 800;
            color: #1e293b;
            margin: 0;
        }

        .close {
            color: #64748b;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 5px;
            border-radius: 50%;
        }

        .close:hover {
            color: #1e293b;
            background: rgba(0, 0, 0, 0.1);
        }

        .modal-body {
            padding: 35px;
            max-height: calc(90vh - 140px);
            overflow-y: auto;
        }

        /* ===== QUICK CREATE FORM ===== */
        .quick-create-form {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            z-index: 3000;
            width: 90%;
            max-width: 500px;
        }

        .quick-create-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 2999;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #1e293b;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }

        .form-select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        .btn-cancel {
            background: #f1f5f9;
            color: #64748b;
            border: 1px solid #e2e8f0;
        }

        .btn-cancel:hover {
            background: #e2e8f0;
        }

        /* ===== RESPONSIVE ===== */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .main-content {
                margin-left: 0;
            }

            .kanban-board {
                flex-direction: column;
                height: auto;
            }

            .kanban-column {
                min-width: auto;
            }

            .kanban-header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }

            .kanban-actions {
                width: 100%;
                justify-content: center;
            }
        }

        /* ===== LOADING ANIMATION ===== */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* ===== NOTIFICATION ===== */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 12px;
            color: white;
            font-weight: 600;
            z-index: 4000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .notification.error {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><i class="fas fa-graduation-cap"></i> Admin Panel</h2>
        </div>
        <nav class="sidebar-nav">
            <a href="/dashboard/admin" class="nav-item">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </a>
            <a href="/admin/users" class="nav-item">
                <i class="fas fa-users"></i> Usuarios
            </a>
            <a href="/admin/roles" class="nav-item">
                <i class="fas fa-user-shield"></i> Roles
            </a>
            <a href="/admin/projects" class="nav-item active">
                <i class="fas fa-project-diagram"></i> Proyectos
            </a>
            <a href="/admin/deliverables" class="nav-item">
                <i class="fas fa-tasks"></i> Entregables
            </a>
            <a href="/admin/calendar" class="nav-item">
                <i class="fas fa-calendar"></i> Calendario
            </a>
            <a href="/admin/invitations" class="nav-item">
                <i class="fas fa-envelope"></i> Invitaciones
            </a>
            <a href="/admin/reports" class="nav-item">
                <i class="fas fa-chart-bar"></i> Reportes
            </a>
            <a href="/admin/settings" class="nav-item">
                <i class="fas fa-cog"></i> Configuraci√≥n
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Bar -->
        <div class="top-bar">
            <div class="back-navigation">
                <a href="/admin/projects/<%= project.id %>/details" class="back-arrow" title="Volver al proyecto">
                    <i class="fas fa-arrow-left"></i>
                </a>
            </div>
            <div class="user-profile">
                <div class="user-avatar">
                    <%= user.nombres.charAt(0).toUpperCase() %><%= user.apellidos.charAt(0).toUpperCase() %>
                </div>
                <div class="user-info">
                    <h4><%= user.nombres %> <%= user.apellidos %></h4>
                    <span><%= user.rol_nombre %></span>
                </div>
            </div>
        </div>

        <!-- Kanban Container -->
        <div class="kanban-container">
            <!-- Header -->
            <div class="kanban-header">
                <h1 class="kanban-title">
                    <i class="fas fa-tasks"></i>
                    Tablero de Tareas - <%= project.titulo %>
                </h1>
                <div class="kanban-actions">
                    <button class="btn btn-quick-create" onclick="openQuickCreateForm()">
                        <i class="fas fa-plus-circle"></i> Nueva Tarea
                    </button>
                    <button class="btn btn-secondary" onclick="refreshBoard()">
                        <i class="fas fa-sync-alt"></i> Actualizar
                    </button>
                </div>
            </div>

            <!-- Kanban Board -->
            <div class="kanban-board">
                <!-- TODO Column -->
                <div class="kanban-column" data-status="todo">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #64748b;"></i>
                            Por Hacer
                        </div>
                        <div class="column-count"><%= tasksGrouped.todo.length %></div>
                    </div>
                    <div class="column-body" id="todo-column">
                        <% if (tasksGrouped.todo.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-inbox"></i>
                                <p>No hay tareas pendientes</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.todo.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>

                <!-- IN PROGRESS Column -->
                <div class="kanban-column" data-status="in_progress">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #f59e0b;"></i>
                            En Progreso
                        </div>
                        <div class="column-count"><%= tasksGrouped.in_progress.length %></div>
                    </div>
                    <div class="column-body" id="in_progress-column">
                        <% if (tasksGrouped.in_progress.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-clock"></i>
                                <p>No hay tareas en progreso</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.in_progress.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>

                <!-- DONE Column -->
                <div class="kanban-column" data-status="done">
                    <div class="column-header">
                        <div class="column-title">
                            <i class="fas fa-circle" style="color: #10b981;"></i>
                            Completadas
                        </div>
                        <div class="column-count"><%= tasksGrouped.done.length %></div>
                    </div>
                    <div class="column-body" id="done-column">
                        <% if (tasksGrouped.done.length === 0) { %>
                            <div class="empty-column">
                                <i class="fas fa-check-circle"></i>
                                <p>No hay tareas completadas</p>
                            </div>
                        <% } else { %>
                            <% tasksGrouped.done.forEach(task => { %>
                                <%- include('partials/task-card', { task: task }) %>
                            <% }) %>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Complete Create Form -->
    <div class="quick-create-overlay" onclick="closeQuickCreateForm()"></div>
    <div class="quick-create-form" style="max-height: 90vh; overflow-y: auto;">
        <h3 style="margin-bottom: 25px; color: #1e293b; font-weight: 700; font-size: 20px;">
            <i class="fas fa-plus-circle" style="color: #667eea; margin-right: 10px;"></i>
            Nueva Tarea
        </h3>
        <form id="quickCreateTaskForm" enctype="multipart/form-data">
            <!-- Informaci√≥n B√°sica -->
            <div class="form-group">
                <label class="form-label">T√≠tulo de la tarea <span style="color: #ef4444;">*</span></label>
                <input type="text" id="quickTaskTitle" class="form-input" placeholder="Ingresa el t√≠tulo de la tarea" required>
            </div>

            <div class="form-group">
                <label class="form-label">Descripci√≥n</label>
                <textarea id="quickTaskDescription" class="form-input form-textarea" placeholder="Describe los detalles de la tarea"></textarea>
            </div>

            <!-- Configuraci√≥n de Tarea -->
            <div class="form-group">
                <label class="form-label">Fase del Proyecto</label>
                <select id="quickTaskPhase" class="form-select">
                    <option value="">Sin fase espec√≠fica</option>
                    <% if (fases && fases.length > 0) { %>
                        <% fases.forEach(fase => { %>
                            <option value="<%= fase.id %>"><%= fase.nombre %></option>
                        <% }) %>
                    <% } %>
                </select>
            </div>

            <!-- Asignaci√≥n y Fechas -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div class="form-group">
                    <label class="form-label">Asignar a</label>
                    <select id="quickTaskAssignee" class="form-select">
                        <option value="">Sin asignar</option>
                        <% if (members && members.length > 0) { %>
                            <% members.forEach(member => { %>
                                <option value="<%= member.usuario_id %>"><%= member.nombres %> <%= member.apellidos %> (<%= member.rol_nombre %>)</option>
                            <% }) %>
                        <% } %>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Fecha L√≠mite</label>
                    <input type="date" id="quickTaskDeadline" class="form-input">
                </div>
            </div>

            <!-- Estimaci√≥n de Tiempo -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <div class="form-group">
                    <label class="form-label">Estimaci√≥n (horas)</label>
                    <input type="number" id="quickTaskEstimation" class="form-input" min="0" step="0.5" placeholder="Ej: 8">
                </div>

                <div class="form-group">
                    <label class="form-label">Estado Inicial</label>
                    <select id="quickTaskStatus" class="form-select">
                        <option value="todo" selected>Por Hacer</option>
                        <option value="in_progress">En Progreso</option>
                    </select>
                </div>
            </div>

            <!-- Etiquetas -->
            <div class="form-group">
                <label class="form-label">Etiquetas</label>
                <input type="text" id="quickTaskTags" class="form-input" placeholder="frontend, backend, dise√±o (separadas por comas)">
            </div>

            <!-- Archivos Adjuntos -->
            <div class="form-group">
                <label class="form-label">Archivos Adjuntos</label>
                <input type="file" id="quickTaskFiles" class="form-input" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.jpg,.jpeg,.png,.gif">
                <div style="font-size: 12px; color: #64748b; margin-top: 5px;">Puedes adjuntar m√∫ltiples archivos relacionados con la tarea</div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-cancel" onclick="closeQuickCreateForm()">
                    <i class="fas fa-times"></i> Cancelar
                </button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Crear Tarea
                </button>
            </div>
        </form>
    </div>

    <!-- Task Detail Modal -->
    <div id="taskModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Detalles de la Tarea</h2>
                <span class="close" onclick="closeTaskModal()">&times;</span>
            </div>
            <div class="modal-body" id="taskModalBody">
                <!-- Task details will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        const projectId = '<%= project.id %>';
        let currentTask = null;

        // Quick Create Form Functions
        function openQuickCreateForm() {
            document.querySelector('.quick-create-overlay').style.display = 'block';
            document.querySelector('.quick-create-form').style.display = 'block';
            document.getElementById('quickTaskTitle').focus();
        }

        function closeQuickCreateForm() {
            document.querySelector('.quick-create-overlay').style.display = 'none';
            document.querySelector('.quick-create-form').style.display = 'none';
            document.getElementById('quickCreateTaskForm').reset();
        }

        // Handle complete create form submission
        document.getElementById('quickCreateTaskForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const title = document.getElementById('quickTaskTitle').value.trim();
            const description = document.getElementById('quickTaskDescription').value.trim();
            const assigneeId = document.getElementById('quickTaskAssignee').value;
            const phaseId = document.getElementById('quickTaskPhase').value;
            const deadline = document.getElementById('quickTaskDeadline').value;
            const estimation = document.getElementById('quickTaskEstimation').value;
            const status = document.getElementById('quickTaskStatus').value;
            const tags = document.getElementById('quickTaskTags').value.trim();
            const files = document.getElementById('quickTaskFiles').files;
            
            if (!title) {
                showNotification('Por favor ingresa un t√≠tulo para la tarea', 'error');
                return;
            }
            
            // Validar fecha l√≠mite no sea en el pasado
            if (deadline) {
                const fechaSeleccionada = new Date(deadline);
                const hoy = new Date();
                hoy.setHours(0, 0, 0, 0);
                
                if (fechaSeleccionada < hoy) {
                    showNotification('La fecha l√≠mite no puede ser en el pasado', 'error');
                    return;
                }
            }
            
            // Crear FormData para manejar archivos
            const formData = new FormData();
            formData.append('titulo', title);
            formData.append('descripcion', description || '');
            formData.append('proyecto_id', projectId);
            formData.append('estado_workflow', status);
            
            if (assigneeId) formData.append('asignado_a', assigneeId);
            if (phaseId) formData.append('fase_id', phaseId);
            if (deadline) formData.append('fecha_limite', deadline);
            if (estimation) formData.append('estimacion_horas', estimation);
            if (tags) formData.append('etiquetas', tags);
            
            // Agregar archivos
            for (let i = 0; i < files.length; i++) {
                formData.append('archivos_adjuntos', files[i]);
            }
            
            try {
                const submitBtn = document.querySelector('#quickCreateTaskForm button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<div class="loading"></div> Creando...';
                submitBtn.disabled = true;
                
                console.log('Enviando petici√≥n para crear tarea...');
                
                const response = await fetch(`/admin/api/projects/${projectId}/tasks/quick`, {
                    method: 'POST',
                    body: formData
                });
                
                console.log('Respuesta recibida:', response.status, response.statusText);
                
                if (response.ok) {
                    const responseData = await response.json();
                    console.log('Datos de respuesta:', responseData);
                    
                    if (responseData.success) {
                        showNotification('Tarea creada exitosamente', 'success');
                        closeQuickCreateForm();
                        refreshBoard();
                    } else {
                        showNotification('Error al crear la tarea: ' + (responseData.message || 'Error desconocido'), 'error');
                    }
                } else {
                    console.error('Error HTTP:', response.status, response.statusText);
                    let errorMessage = 'Error del servidor';
                    
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorMessage;
                    } catch (parseError) {
                        console.error('Error al parsear respuesta de error:', parseError);
                        try {
                            errorMessage = await response.text();
                        } catch (textError) {
                            console.error('Error al obtener texto de respuesta:', textError);
                        }
                    }
                    
                    showNotification('Error al crear la tarea: ' + errorMessage, 'error');
                }
            } catch (error) {
                console.error('Error creating task:', error);
                
                // Manejo espec√≠fico para ERR_ABORTED
                if (error.name === 'AbortError' || error.message.includes('aborted')) {
                    console.warn('Petici√≥n abortada - esto puede ser normal si la tarea se cre√≥ exitosamente');
                    // Verificar si la tarea se cre√≥ revisando el tablero
                    setTimeout(() => {
                        refreshBoard();
                    }, 1000);
                    showNotification('Tarea creada (verificando estado...)', 'success');
                } else {
                    showNotification('Error al crear la tarea: ' + error.message, 'error');
                }
            } finally {
                const submitBtn = document.querySelector('#quickCreateTaskForm button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-save"></i> Crear Tarea';
                submitBtn.disabled = false;
            }
        });

        // Notification function
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }

        // Funci√≥n para abrir modal de tarea
        function openTaskModal(taskId) {
            fetch(`/admin/api/tasks/${taskId}/details`)
                .then(response => response.json())
                .then(data => {
                    console.log('Datos recibidos para el modal:', data); // <-- DEBUG
                    console.log('Archivos adjuntos espec√≠ficamente:', data.task.archivos_adjuntos); // <-- DEBUG ARCHIVOS
                    if (data.success) {
                        currentTask = data.task;
                        renderTaskModal({
                            task: data.task,
                            comments: data.task.comments || [],
                            history: data.task.history || []
                        });
                        document.getElementById('taskModal').style.display = 'block';
                    } else {
                        showNotification('Error al cargar los detalles de la tarea', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error al cargar los detalles de la tarea', 'error');
                });
        }

        // Funci√≥n para cerrar modal
        function closeTaskModal() {
            document.getElementById('taskModal').style.display = 'none';
            currentTask = null;
        }

        // Funci√≥n para renderizar el modal de tarea
        function renderTaskModal(data) {
            const { task, comments, history } = data;
            const modalBody = document.getElementById('taskModalBody');
            
            // Construir el nombre del asignado correctamente
            let taskAssignee = 'Sin asignar';
            if (task.asignado_nombres && task.asignado_apellidos) {
                taskAssignee = `${task.asignado_nombres} ${task.asignado_apellidos}`;
            } else if (task.asignado_nombres) {
                taskAssignee = task.asignado_nombres;
            }
            
            modalBody.innerHTML = `
                <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 30px;">
                    <!-- Informaci√≥n Principal -->
                    <div>
                        <div style="margin-bottom: 25px;">
                            <h3 style="font-size: 24px; font-weight: 700; color: #1e293b; margin-bottom: 10px;">${task.titulo}</h3>
                            <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 15px;">
                                <span class="task-priority priority-${task.prioridad}">${task.prioridad}</span>
                                <span style="padding: 4px 8px; background: #f1f5f9; border-radius: 6px; font-size: 12px; color: #64748b;">
                                    ${task.fase_nombre || 'Sin fase'}
                                </span>
                            </div>
                            <p style="color: #64748b; line-height: 1.6;">${task.descripcion || 'Sin descripci√≥n'}</p>
                        </div>
                        
                        ${task.desarrollo_descripcion ? `
                            <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px; border-left: 4px solid #10b981;">
                                <h4 style="color: #1e293b; margin-bottom: 10px; font-weight: 600;">Desarrollo Completado</h4>
                                <p style="color: #64748b; line-height: 1.6;">${task.desarrollo_descripcion}</p>
                            </div>
                        ` : ''}
                        
                        <!-- Comentarios -->
                        <div>
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Comentarios</h4>
                            <div id="commentsContainer" style="max-height: 300px; overflow-y: auto;">
                                ${comments.length > 0 ? comments.map(comment => `
                                    <div style="margin-bottom: 15px; padding: 15px; background: #f8fafc; border-radius: 10px;">
                                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                            <strong style="color: #1e293b;">${comment.nombres} ${comment.apellidos}</strong>
                                            <span style="font-size: 12px; color: #64748b;">${new Date(comment.created_at).toLocaleString()}</span>
                                        </div>
                                        <p style="color: #64748b; margin: 0;">${comment.comentario}</p>
                                    </div>
                                `).join('') : '<p style="color: #64748b; font-style: italic;">No hay comentarios a√∫n</p>'}
                            </div>
                        </div>
                        
                        <!-- Archivos Adjuntos -->
                        <div style="margin-top: 25px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">
                                <i class="fas fa-paperclip" style="margin-right: 8px; color: #667eea;"></i>
                                Archivos Adjuntos
                            </h4>
                            <div id="attachmentsContainer">
                                ${task.archivos_adjuntos && task.archivos_adjuntos.length > 0 ? 
                                    task.archivos_adjuntos.map(archivo => `
                                        <div style="margin-bottom: 10px; padding: 12px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
                                            <div style="display: flex; align-items: center; justify-content: space-between;">
                                                <div style="display: flex; align-items: center; gap: 10px;">
                                                    <i class="fas fa-file" style="color: #667eea; font-size: 16px;"></i>
                                                    <div>
                                                        <div style="font-weight: 500; color: #1e293b; font-size: 14px;">${archivo.nombre_original}</div>
                                                        <div style="font-size: 12px; color: #64748b;">
                                                            ${archivo.tipo_mime} ‚Ä¢ ${(archivo.tama√±o / 1024 / 1024).toFixed(2)} MB
                                                        </div>
                                                    </div>
                                                </div>
                                                <div style="display: flex; gap: 8px;">
                                                    <a href="/uploads/deliverables/${archivo.nombre_archivo}" 
                                       target="_blank" 
                                       style="padding: 6px 12px; background: #667eea; color: white; text-decoration: none; border-radius: 6px; font-size: 12px; display: flex; align-items: center; gap: 4px;">
                                        <i class="fas fa-eye"></i> Ver
                                    </a>
                                    <a href="/uploads/deliverables/${archivo.nombre_archivo}" 
                                       download="${archivo.nombre_original}"
                                       style="padding: 6px 12px; background: #10b981; color: white; text-decoration: none; border-radius: 6px; font-size: 12px; display: flex; align-items: center; gap: 4px;">
                                        <i class="fas fa-download"></i> Descargar
                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('') 
                                    : '<p style="color: #64748b; font-style: italic; padding: 15px; background: #f8fafc; border-radius: 8px; text-align: center;">No hay archivos adjuntos</p>'
                                }
                            </div>
                        </div>
                    </div>
                    
                    <!-- Panel Lateral -->
                    <div>
                        <!-- Estado -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Estado</h4>
                            <select id="taskStatus" onchange="updateTaskStatus()" 
                                   style="width: 100%; padding: 10px; border: 1px solid #e2e8f0; border-radius: 8px;">
                                <option value="todo" ${task.estado_workflow === 'todo' ? 'selected' : ''}>Por Hacer</option>
                                <option value="in_progress" ${task.estado_workflow === 'in_progress' ? 'selected' : ''}>En Progreso</option>
                                <option value="done" ${task.estado_workflow === 'done' ? 'selected' : ''}>Completada</option>
                            </select>
                        </div>
                        
                        <!-- Asignaci√≥n -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Asignado a</h4>
                            ${taskAssignee !== 'Sin asignar' ? `
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <div class="assignee-avatar">${task.asignado_nombres ? task.asignado_nombres.charAt(0) : ''}${task.asignado_apellidos ? task.asignado_apellidos.charAt(0) : ''}</div>
                                    <span>${taskAssignee}</span>
                                </div>
                            ` : '<p style="color: #64748b; font-style: italic;">Sin asignar</p>'}
                        </div>
                        
                        <!-- Fechas -->
                        <div style="margin-bottom: 25px; padding: 20px; background: #f8fafc; border-radius: 10px;">
                            <h4 style="color: #1e293b; margin-bottom: 15px; font-weight: 600;">Fechas</h4>
                            <div style="font-size: 14px; color: #64748b;">
                                ${task.fecha_limite ? `
                                    <p><strong>Fecha l√≠mite:</strong> ${new Date(task.fecha_limite).toLocaleDateString()}</p>
                                ` : ''}
                                <p><strong>Creada:</strong> ${new Date(task.created_at).toLocaleDateString()}</p>
                                ${task.fecha_completado ? `
                                    <p><strong>Completada:</strong> ${new Date(task.fecha_completado).toLocaleDateString()}</p>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Funci√≥n para actualizar estado de tarea
        function updateTaskStatus() {
            const newStatus = document.getElementById('taskStatus').value;
            
            fetch(`/admin/api/tasks/${currentTask.id}/workflow-status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Estado actualizado correctamente', 'success');
                    refreshBoard();
                    closeTaskModal();
                } else {
                    showNotification('Error al actualizar el estado: ' + data.error, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Error al actualizar el estado', 'error');
            });
        }

        // Funci√≥n para refrescar el tablero
        function refreshBoard() {
            location.reload();
        }

        // Cerrar modal al hacer clic fuera
        window.onclick = function(event) {
            const modal = document.getElementById('taskModal');
            if (event.target === modal) {
                closeTaskModal();
            }
        }

        // Cerrar quick create form con ESC
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeQuickCreateForm();
                closeTaskModal();
            }
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Kanban board loaded successfully');
            
            // Configurar fecha m√≠nima para fecha l√≠mite
            const fechaLimiteInput = document.getElementById('quickTaskDeadline');
            const hoy = new Date().toISOString().split('T')[0];
            fechaLimiteInput.min = hoy;
        });
    </script>
</body>
</html>