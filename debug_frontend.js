// Script para debuggear el frontend - Ejecutar en la consola del navegador
// Ir a http://localhost:3000/projects/35 y ejecutar este c√≥digo en la consola

console.log('üîç === DEBUGGING ENTREGABLES DEL PROYECTO ===');

// 1. Verificar si projectData est√° definido
console.log('\n1. üìä Verificando projectData:');
if (typeof projectData !== 'undefined') {
  console.log('   ‚úÖ projectData est√° definido:', projectData);
} else {
  console.log('   ‚ùå projectData NO est√° definido');
}

// 2. Verificar si las funciones est√°n definidas
console.log('\n2. üîß Verificando funciones:');
console.log('   - loadDeliverables:', typeof loadDeliverables);
console.log('   - displayDeliverables:', typeof displayDeliverables);
console.log('   - showEmptyDeliverables:', typeof showEmptyDeliverables);

// 3. Verificar elementos del DOM
console.log('\n3. üéØ Verificando elementos del DOM:');
const deliverablesList = document.getElementById('deliverables-list');
const deliverablesEmpty = document.getElementById('deliverables-empty');

console.log('   - deliverables-list:', deliverablesList ? '‚úÖ ENCONTRADO' : '‚ùå NO ENCONTRADO');
console.log('   - deliverables-empty:', deliverablesEmpty ? '‚úÖ ENCONTRADO' : '‚ùå NO ENCONTRADO');

if (deliverablesList) {
  console.log('   - Contenido actual de deliverables-list:', deliverablesList.innerHTML.length > 0 ? 'TIENE CONTENIDO' : 'VAC√çO');
}

if (deliverablesEmpty) {
  console.log('   - Estado de deliverables-empty:', deliverablesEmpty.style.display);
}

// 4. Probar la llamada AJAX manualmente
console.log('\n4. üöÄ Probando llamada AJAX manual:');
if (typeof projectData !== 'undefined' && projectData.id) {
  fetch(`/projects/${projectData.id}/deliverables`)
    .then(response => {
      console.log('   üì° Response status:', response.status);
      console.log('   üì° Response ok:', response.ok);
      return response.json();
    })
    .then(data => {
      console.log('   üì¶ Response data:', data);
      
      if (data.success && data.deliverables) {
        console.log(`   ‚úÖ ${data.deliverables.length} entregables recibidos`);
        
        // 5. Probar displayDeliverables manualmente
        console.log('\n5. üé® Probando displayDeliverables manualmente:');
        if (typeof displayDeliverables === 'function') {
          try {
            displayDeliverables(data.deliverables);
            console.log('   ‚úÖ displayDeliverables ejecutado sin errores');
            
            // Verificar el resultado
            setTimeout(() => {
              const updatedList = document.getElementById('deliverables-list');
              const updatedEmpty = document.getElementById('deliverables-empty');
              
              console.log('\n6. üìã Resultado despu√©s de displayDeliverables:');
              console.log('   - deliverables-list tiene contenido:', updatedList && updatedList.innerHTML.length > 0);
              console.log('   - deliverables-empty est√° oculto:', updatedEmpty && updatedEmpty.style.display === 'none');
              
              if (updatedList && updatedList.innerHTML.length > 0) {
                console.log('   ‚úÖ ¬°Los entregables se mostraron correctamente!');
              } else {
                console.log('   ‚ùå Los entregables no se mostraron');
              }
            }, 100);
            
          } catch (error) {
            console.error('   ‚ùå Error al ejecutar displayDeliverables:', error);
          }
        } else {
          console.log('   ‚ùå displayDeliverables no est√° definido');
        }
      } else {
        console.log('   ‚ùå No se recibieron entregables o hubo error:', data);
      }
    })
    .catch(error => {
      console.error('   ‚ùå Error en la llamada AJAX:', error);
    });
} else {
  console.log('   ‚ùå No se puede hacer la llamada - projectData no v√°lido');
}

// 7. Verificar errores en la consola
console.log('\n7. üö® Verificando errores previos en la consola:');
console.log('   (Revisa manualmente si hay errores rojos arriba de este mensaje)');

console.log('\n=== FIN DEL DEBUG ===');
console.log('üí° Si no ves errores y los entregables no se muestran, el problema puede estar en:');
console.log('   1. CSS que oculta los elementos');
console.log('   2. Conflictos con otros scripts');
console.log('   3. Problemas de timing en la carga');