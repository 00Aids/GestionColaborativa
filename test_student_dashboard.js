const { pool } = require('./src/config/database');
const Project = require('./src/models/Project');

async function testStudentDashboard() {
    try {
        console.log('üîç Probando dashboard del estudiante vsoyjostin2@gmail.com...');
        
        // Buscar el usuario estudiante
        const [user] = await pool.execute(`
            SELECT u.id, u.email, u.nombres, u.apellidos, u.rol_id, r.nombre as rol_nombre
            FROM usuarios u
            JOIN roles r ON u.rol_id = r.id
            WHERE u.email = 'vsoyjostin2@gmail.com'
        `);
        
        if (user.length === 0) {
            console.log('‚ùå Usuario no encontrado');
            return;
        }
        
        const studentUser = user[0];
        console.log(`üë§ Usuario: ${studentUser.nombres} ${studentUser.apellidos}`);
        console.log(`üìß Email: ${studentUser.email}`);
        console.log(`üé≠ Rol: ${studentUser.rol_nombre} (ID: ${studentUser.rol_id})`);
        
        // Simular la l√≥gica del dashboard para estudiantes
        const projectModel = new Project();
        
        console.log('\nüîç Obteniendo proyectos del estudiante...');
        
        // Usar el m√©todo findByStudent como en el DashboardController
        const studentProjects = await projectModel.findByStudent(studentUser.id);
        
        console.log(`\nüìä PROYECTOS DEL ESTUDIANTE (${studentProjects.length}):`);
        if (studentProjects.length > 0) {
            studentProjects.forEach(project => {
                console.log(`  ‚úÖ ID: ${project.id} - ${project.titulo}`);
                console.log(`     Estado: ${project.estado}`);
                console.log(`     Estudiante ID: ${project.estudiante_id}`);
                console.log(`     √Årea: ${project.area_trabajo_id || 'Sin √°rea'}`);
                console.log('');
            });
        } else {
            console.log('  ‚ùå No se encontraron proyectos asignados al estudiante');
        }
        
        // Comparar con todos los proyectos para verificar el filtrado
        console.log('\nüîç Comparando con TODOS los proyectos del sistema...');
        const allProjects = await projectModel.findWithDetails();
        
        console.log(`\nüìä TODOS LOS PROYECTOS DEL SISTEMA (${allProjects.length}):`);
        allProjects.forEach(project => {
            const isStudentProject = project.estudiante_id === studentUser.id;
            const marker = isStudentProject ? '‚úÖ' : '‚ùå';
            console.log(`  ${marker} ID: ${project.id} - ${project.titulo} (Estudiante: ${project.estudiante_id})`);
        });
        
        // Verificar asignaciones en proyecto_usuarios
        console.log('\nüîç Verificando asignaciones en proyecto_usuarios...');
        const [assignments] = await pool.execute(`
            SELECT pu.proyecto_id, pu.rol, pu.estado, p.titulo
            FROM proyecto_usuarios pu
            JOIN proyectos p ON pu.proyecto_id = p.id
            WHERE pu.usuario_id = ?
        `, [studentUser.id]);
        
        console.log(`\nüìã ASIGNACIONES EN PROYECTO_USUARIOS (${assignments.length}):`);
        assignments.forEach(assignment => {
            console.log(`  üìÅ Proyecto: ${assignment.titulo} (ID: ${assignment.proyecto_id})`);
            console.log(`     Rol: ${assignment.rol}`);
            console.log(`     Estado: ${assignment.estado}`);
            console.log('');
        });
        
        // Resumen final
        console.log('\nüìà RESUMEN:');
        console.log(`  - Proyectos asignados como estudiante principal: ${studentProjects.length}`);
        console.log(`  - Asignaciones adicionales en proyecto_usuarios: ${assignments.length}`);
        console.log(`  - Total de proyectos en el sistema: ${allProjects.length}`);
        
        if (studentProjects.length > 0) {
            console.log('\n‚úÖ EL FILTRADO EST√Å FUNCIONANDO CORRECTAMENTE');
            console.log('   El estudiante solo ve sus proyectos asignados');
        } else {
            console.log('\n‚ùå PROBLEMA: El estudiante no ve ning√∫n proyecto');
            console.log('   Verificar la asignaci√≥n o la l√≥gica de filtrado');
        }
        
        await pool.end();
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

testStudentDashboard();